///////////////////
// DEFAULT SETTINGS
///////////////////

// Classes
$rr-global-hide-class: 'hide' !default;
$rr-global-show-class: 'show' !default;
$rr-global-unset-class: 'unset' !default;
$rr-global-reset-class: 'reset' !default;
$rr-global-auto-class: 'auto' !default;
$rr-global-gutter-class: 'gutter' !default;
$rr-global-full-class: 'full' !default;
$rr-global-hover-suffix-class: '-hover' !default;

$rr-global-can-hover-class: 'can-hover' !default;
$rr-global-can-touch-class: 'can-touch' !default;

// Primary responslr color
$rr-primary-color: #17d996;

// Output handling
$rr-generate-classes: true !default;
$rr-generate-breakpoint-classes: true !default;
$rr-generate-settings: true !default;

/////////////////////
// INTERNAL VARIABLES
/////////////////////

$rr-global-settings: ();

////////////
// FUNCTIONS
////////////

// Check if map entry exists
@function entry-exists($map, $name) {
	@return map-has-key($map, to-string($name));
}

// Get map entry by name
@function get-entry-by-name($map, $name: null, $default: null) {
	$return: null;

	@if is-null($name) and not is-null($default) {
		$name: $default;
	}

	$name: to-string($name);

	@if entry-exists($map, $name) {
		$return: map-get($map, $name);
	}

	@return $return;
}

// Get a map entry value by name
@function get-entry-property($map, $name, $property, $defaults: (), $default-name: null) {
	$return: null;
	$entry: null;

	@if is-map($name) {
		$entry: $name;
	} @else if entry-exists($map, $name) or is-null($name) {
		$entry: get-entry-by-name($map, $name, $default-name);
	}

	@if is-not-null($entry) {
		@if is-map($entry) and map-has-key($entry, $property) {
			$return: map-get($entry, $property);
		} @else {
			$return: map-get($defaults, $property);
		}
	} @else {
		$return: map-get($defaults, $property);
	}

	@return $return;
}

// Get the main value from an entry
// @function get-value-by-entry($entry, $property, $breakpoint-name: '') {
// 	$value: null;

// 	@if $breakpoint-name != '' and not grid-is-default($breakpoint-name) {
// 		$breakpoint-overwrites: get-breakpoint-overwrite-by-entry($entry, $breakpoint-name);

// 		@if is-not-null($breakpoint-overwrites) {
// 			$entry: $breakpoint-overwrites;
// 		}
// 	}

// 	@if is-map($entry) {
// 		@if map-has-key($entry, $property) {
// 			$value: map-get($entry, $property);
// 		}
// 	} @else {
// 		$value: $entry;
// 	}

// 	@return $value;
// }

// Get the main value from an entry
@function get-value-by-entry($entry, $property, $breakpoint-name: '') {
	$value: null;

	// Set default
	@if is-map($entry) and map-has-key($entry, $property) {
		$value: map-get($entry, $property);
	} @else {
		$value: $entry;
	}

	// Get breakpoint overwrite
	@if $breakpoint-name != '' and not grid-is-default($breakpoint-name) {
		$breakpoint-reached: false;

		@each $breakpoint-name-loop, $breakpoint-entry in $rr-grid-breakpoints {
			@if not $breakpoint-reached {
				$breakpoint-overwrites: get-breakpoint-overwrite-by-entry($entry, $breakpoint-name-loop);

				@if is-map($breakpoint-overwrites) and map-has-key($breakpoint-overwrites, $property) {
					$value: map-get($breakpoint-overwrites, $property);
				} @else if is-not-null($breakpoint-overwrites) {
					$value: $breakpoint-overwrites;
				}

				@if $breakpoint-name-loop == $breakpoint-name {
					$breakpoint-reached: true;
				}
			}
		}
	}

	@return $value;
}

// Get a property from an entry
@function get-property-by-entry($entry, $property, $default: null, $breakpoint-name: '') {
	$value: null;

	// Set default
	@if is-map($entry) and map-has-key($entry, $property) {
		$value: map-get($entry, $property);
	} @else {
		$value: $default;
	}

	// Get breakpoint overwrite
	@if $breakpoint-name != '' and not grid-is-default($breakpoint-name) {
		$breakpoint-reached: false;

		@each $breakpoint-name-loop, $breakpoint-entry in $rr-grid-breakpoints {
			@if not $breakpoint-reached {
				$breakpoint-overwrites: get-breakpoint-overwrite-by-entry($entry, $breakpoint-name-loop);

				@if is-map($breakpoint-overwrites) and map-has-key($breakpoint-overwrites, $property) {
					$value: map-get($breakpoint-overwrites, $property);
				}

				@if $breakpoint-name-loop == $breakpoint-name {
					$breakpoint-reached: true;
				}
			}
		}
	}

	@return $value;
}

// Get breakpoint overwrites by entry
@function get-breakpoint-overwrite-by-entry($entry, $breakpoint-name) {
	$breakpoints: map-maybe-get($entry, 'breakpoints', ());
	$overwrites: map-get($breakpoints, $breakpoint-name);
	@return $overwrites;
}

// Check if an entry has a specific breakpoint overwrite
@function entry-has-breakpoint-overwrite($entry, $breakpoint-name) {
	@return get-breakpoint-overwrite-by-entry($entry, $breakpoint-name) != null;
}

/////////
// MIXINS
/////////

// Generate output with a single property
@mixin generate-output-by-property($property, $values, $prefix: '', $breakpoint-prefix: '', $generate-unset: false, $additional-unset-prefix: '') {
	// Generate normal classes
	@each $value-raw in $values {
		$value: if(is-list($value-raw), nth($value-raw, 2), $value-raw);
		$class-name: nth($value-raw, 1);

		.#{$breakpoint-prefix}#{$prefix}#{$class-name} {
			#{$property}: $value;
		}
	}

	// Generate additional unset class
	@if $generate-unset and $breakpoint-prefix != '' {
		.#{$breakpoint-prefix}#{$prefix}#{$additional-unset-prefix}#{$rr-global-unset-class} {
			#{$property}: unset;
		}
	}
}

// Generate output by a single class with multiple properties
@mixin generate-output-by-class($class, $properties, $prefix: '', $breakpoint-prefix: '', $breakpoint-overwrites: false, $generate-breakpoints: true) {
	$selector: ();

	@if $breakpoint-overwrites {
		$selector: append($selector, '.#{$prefix}#{$class}', 'comma');
	}

	@if $generate-breakpoints {
		$selector: append($selector, '.#{$breakpoint-prefix}#{$prefix}#{$class}', 'comma');
	}

	@if not list-empty($selector) {
		#{$selector} {
			@include generate-properties($properties);
		}
	}
}

// Generate output by multiple classes with multiple properties
@mixin generate-output-by-classes($classes, $prefix: '', $breakpoint-prefix: '', $generate-unset: false, $additional-unset-prefix: '', $generate-breakpoints: true) {
	// Generate normal classes
	@each $class-name, $class-properties in $classes {
		@include generate-output-by-class(
			$class: $class-name,
			$properties: $class-properties,
			$prefix: $prefix,
			$breakpoint-prefix: $breakpoint-prefix,
			$generate-breakpoints: $generate-breakpoints
		);
	}

	// Generate additional unset class
	@if $generate-unset and $breakpoint-prefix != '' {
		@include generate-output-by-class(
			$class: $rr-global-unset-class,
			$properties: $generate-unset,
			$prefix: $prefix + $additional-unset-prefix,
			$breakpoint-prefix: $breakpoint-prefix,
			$generate-breakpoints: $generate-breakpoints
		);
	}
}

// Get entry mixin output
@mixin entry-output($entry, $property-function, $breakpoint-name: '', $args...) {
	@if is-not-null($entry) {
		@include generate-properties(
			call(get-function($property-function), $entry, $breakpoint-name, $args...)
		);

		// Breakpoint overwrites if no breakpoint is defined
		@if $breakpoint-name == '' {
			@each $breakpoint-name-sub, $breakpoint-entry in $rr-grid-breakpoints {
				@if entry-has-breakpoint-overwrite($entry, $breakpoint-name-sub) {
					@include mq($breakpoint-name-sub) {
						@include generate-properties(
							call(get-function($property-function), $entry, $breakpoint-name-sub, $args...)
						);
					}
				}
			}
		}
	}
}
