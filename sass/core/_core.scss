///////////////////
// DEFAULT SETTINGS
///////////////////

$rr-global-reset-class: 'reset' !default;
$rr-global-auto-class: 'auto' !default;
$rr-global-gutter-class: 'gutter' !default;

$rr-generate-classes: true !default;
$rr-generate-settings: true !default;

/////////////////////
// INTERNAL VARIABLES
/////////////////////

$rr-global-settings: ();
$rr-global-breakpoint-classes: ();

////////////
// FUNCTIONS
////////////

// Check if map entry exists
@function entry-exists($map, $name) {
	@return map-has-key($map, to-string($name));
}

// Get map entry by name
@function get-entry-by-name($map, $name: null, $default: null) {
	$return: null;

	@if is-null($name) and not is-null($default) {
		$name: $default;
	}

	$name: to-string($name);

	@if entry-exists($map, $name) {
		$return: map-get($map, $name);
	}

	@return $return;
}

// Get a map entry value by name
@function get-entry-property($map, $name, $property, $defaults: (), $default-name: null) {
	$return: null;
	$entry: null;

	@if is-map($name) {
		$entry: $name;
	} @else {
		$entry: get-entry-by-name($map, $name, $default-name);
	}

	@if is-not-null($entry) {
		@if is-map($entry) and map-has-key($entry, $property) {
			$return: map-get($entry, $property);
		} @else {
			$return: map-get($defaults, $property);
		}
	} @else {
		$return: map-get($defaults, $property);
	}

	@return $return;
}

// Get entry value by name
@function get-entry-value($map, $name, $property, $default: null) {
	$entry: null;
	$value: $name;

	@if is-map($name) {
		$entry: $name;
	} @else if entry-exists($map, $name) {
		$entry: get-entry-by-name($map, $name, $default);
	}

	@if is-map($entry) and map-has-key($entry, $property) {
		$value: map-get($entry, $property);
	}

	@return $value;
}

// Append breakpoint overwrites for an entry
@function append-breakpoint-overwrites($entry, $properties, $function, $args...) {
	@if is-map($entry) and map-has-key($entry, 'breakpoints') {
		$entry-breakpoints: map-get($entry, 'breakpoints');
		$breakpoints: ();

		@each $breakpoint-name, $breakpoint-value in $entry-breakpoints {
			$breakpoints: map-append($breakpoints, call(get-function($function), $breakpoint-value, $args...), $breakpoint-name);
		}

		$properties: map-append($properties, $breakpoints, 'breakpoints');
	} @else {
		$properties: map-append($properties, (), 'breakpoints');
	}

	@return $properties;
}

/////////
// MIXINS
/////////

// @todo: maybe used later, but only for testing now
@mixin rr-add-simple-breakpoint-classes($property, $values, $class-prefix: '', $generate: (normal, up, down, only), $first-default: true) {
	@each $value in $values {
		$class-name: $value;
		$property-value: $value;

		@if is-list($value) {
			$class-name: nth($value, 1);
			$property-value: nth($value, 2);
		}

		$class-name: $class-prefix + $class-name;

		$rr-global-breakpoint-classes: map-merge($rr-global-breakpoint-classes, (
			$class-name: (
				'properties': (
					'first-default': $first-default,
					'generate': $generate,
					$property: $property-value
				)
			)
		)) !global;
	}
}
