///////////////////
// DEFAULT SETTINGS
///////////////////

@use 'sass:meta';
@use 'sass:map';
@use 'sass:list';

@use '../utils';

// Core
$version: '2.2.0';

// Classes
$hide-class: 'hide' !default;
$show-class: 'show' !default;
$unset-class: 'unset' !default;
$reset-class: 'reset' !default;
$auto-class: 'auto' !default;
$gutter-class: 'gutter' !default;
$full-class: 'full' !default;
$hover-suffix-class: '-hover' !default;

$can-hover-class: 'can-hover' !default;
$can-touch-class: 'can-touch' !default;

// Primary responslr color
$primary-color: #17d996;

// Output handling
$generate-classes: true !default;
$generate-features: $generate-classes !default;
$generate-breakpoint-classes: true !default;

/////////////////////
// INTERNAL VARIABLES
/////////////////////

////////////
// FUNCTIONS
////////////

// Check if map entry exists
@function entry-exists($map, $name) {
	@return map.has-key($map, $name);
}

// Get map entry by name
@function get-entry-by-name($map, $name: null, $default: null) {
	$return: null;

	@if utils.is-null($name) and not utils.is-null($default) {
		$name: $default;
	}

	@if entry-exists($map, $name) {
		$return: map.get($map, $name);
	}

	@return $return;
}

// Get a map entry value by name
@function get-entry-property($map, $name, $property, $defaults: (), $default-name: null) {
	$return: null;
	$entry: null;

	@if utils.is-map($name) {
		$entry: $name;
	} @else if entry-exists($map, $name) or utils.is-null($name) {
		$entry: get-entry-by-name($map, $name, $default-name);
	}

	@if utils.is-not-null($entry) {
		@if utils.is-map($entry) and map.has-key($entry, $property) {
			$return: map.get($entry, $property);
		} @else {
			$return: map.get($defaults, $property);
		}
	} @else {
		$return: map.get($defaults, $property);
	}

	@return $return;
}

// Get breakpoint overwrites by entry
@function get-breakpoint-overwrite-by-entry($entry, $breakpoint-name) {
	$breakpoints: utils.map-maybe-get($entry, 'breakpoints', ());
	$overwrites: map.get($breakpoints, $breakpoint-name);
	@return $overwrites;
}

// Check if an entry has a specific breakpoint overwrite
@function entry-has-breakpoint-overwrite($entry, $breakpoint-name) {
	@return get-breakpoint-overwrite-by-entry($entry, $breakpoint-name) != null;
}

/////////
// MIXINS
/////////

// Smart hover only for hover devices
@mixin hover() {
	html.#{$can-hover-class} &:hover,
	&:focus,
	&:active {
		@content;
	}
}

// Convert map to properties
@mixin generate-properties($properties, $ignore-nested: false) {
	@each $property-name, $property-value in $properties {
		@if utils.is-not-null($property-value) and utils.is-string($property-name) and $property-name != 'breakpoints' {
			@if utils.is-map($property-value) {
				@if not $ignore-nested {
					#{$property-name} {
						@include generate-properties($property-value);
					}
				}
			} @else {
				#{$property-name}: $property-value;
			}
		}
	}
}

// Generate output with a single property
@mixin generate-output-by-property($property, $values, $prefix: '', $breakpoint-prefix: '', $generate-unset: false, $additional-unset-prefix: '') {
	// Generate normal classes
	@each $value-raw in $values {
		$value: if(utils.is-list($value-raw), list.nth($value-raw, 2), $value-raw);
		$class-name: list.nth($value-raw, 1);

		.#{$breakpoint-prefix}#{$prefix}#{$class-name} {
			#{$property}: $value;
		}
	}

	// Generate additional unset class
	@if $generate-unset and $breakpoint-prefix != '' {
		.#{$breakpoint-prefix}#{$prefix}#{$additional-unset-prefix}#{$unset-class} {
			#{$property}: unset;
		}
	}
}

// Generate output by a single class with multiple properties
@mixin generate-output-by-class($class, $properties, $prefix: '', $breakpoint-prefix: '', $append-prefix: false, $generate-breakpoints: true) {
	$selector: ();

	@if $append-prefix {
		@if $generate-breakpoints {
			$selector: list.append($selector, '.#{$breakpoint-prefix}#{$prefix}#{$class}', 'comma');
		}
	} @else {
		$selector: list.append($selector, '.#{$prefix}#{$class}', 'comma');
	}

	@if not utils.list-empty($selector) {
		#{$selector} {
			@include generate-properties($properties);
		}
	}
}

// Generate output by multiple classes with multiple properties
@mixin generate-output-by-classes($classes, $prefix: '', $breakpoint-prefix: '', $generate-unset: false, $additional-unset-prefix: '', $append-prefix: false, $generate-breakpoints: true) {
	// Generate normal classes
	@each $class-name, $class-properties in $classes {
		@include generate-output-by-class(
			$class: $class-name,
			$properties: $class-properties,
			$prefix: $prefix,
			$breakpoint-prefix: $breakpoint-prefix,
			$append-prefix: $append-prefix,
			$generate-breakpoints: $generate-breakpoints
		);
	}

	// Generate additional unset class
	@if $generate-unset and $breakpoint-prefix != '' {
		@include generate-output-by-class(
			$class: $unset-class,
			$properties: $generate-unset,
			$prefix: $prefix + $additional-unset-prefix,
			$breakpoint-prefix: $breakpoint-prefix,
			$append-prefix: $append-prefix,
			$generate-breakpoints: $generate-breakpoints
		);
	}
}
