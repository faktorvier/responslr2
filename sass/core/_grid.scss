///////////////////
// DEFAULT SETTINGS
///////////////////

// Classes
$rr-grid-breakpoint-only-class-suffix: '-only' !default;
$rr-grid-row-class: 'row' !default;
$rr-grid-row-gutter-class: 'row--gutter' !default;
$rr-grid-row-nogutter-class: 'row--nogutter' !default;
$rr-grid-column-class: 'column' !default;
$rr-grid-column-auto-class: $rr-global-auto-class !default;
$rr-grid-column-shrink-class: 'shrink' !default;
$rr-grid-line-break-class: 'column-break' !default;
$rr-grid-container-class: 'container' !default;

$rr-grid-offset-class-prefix: 'offset-' !default;
$rr-grid-reset-class: $rr-global-reset-class !default;

$rr-grid-column-prefix-delimiter: '\\:' !default;

// Breakpoints
$rr-grid-breakpoints: (
	's': (
		'columns': 6,
		'gutter': 32px
	),
	'm': (
		'min-width': 641px,
		'columns': 12,
		'gutter': 32px
	),
	'l': (
		'min-width': 961px,
		'columns': 12,
		'gutter': 24px
	),
	'xl': (
		'min-width': 1440px,
		'columns': 12,
		'gutter': 24px
	)
) !default;

// Defaults
$rr-grid-breakpoint-map-defaults: (
	'columns': null,
	'min-width': null,
	'max-width': null,
	'gutter': 0,
	'base-size': null,
	'container-width': null,
	'container-alignment': 'center',
	'container-spacing': 0
);

// Percentage columns steps
$rr-grid-breakpoint-fraction-steps: 6 !default;
$rr-grid-breakpoint-fraction-prefix-delimiter: '\\/' !default;

// Grid helper
$rr-grid-helper-z-index: 1000000 !default;
$rr-grid-helper-column-background-color: rgba(36,156,213,.5) !default;
$rr-grid-helper-column-border-color: rgba(36,156,213,.8) !default;
$rr-grid-helper-gutter-background-color: rgba(39,174,96,.25) !default;

$rr-grid-helper-info-z-index: 1000001 !default;
$rr-grid-helper-info-position-top: auto !default;
$rr-grid-helper-info-position-right: auto !default;
$rr-grid-helper-info-position-bottom: 5px !default;
$rr-grid-helper-info-position-left: 5px !default;
$rr-grid-helper-info-primary-color: $rr-primary-color !default;
$rr-grid-helper-info-secondary-color: white !default;

$rr-grid-helper-enabled: true !default;

$rr-grid-helper-info-class: 'responslr-grid-helper-info' !default;
$rr-grid-helper-grid-class: 'responslr-grid-helper' !default;
$rr-grid-helper-grid-shower-class: 'responslr-grid-helper__show' !default;

// Output handling
$rr-generate-grid-breakpoints: $rr-generate-classes !default;
$rr-generate-grid-breakpoints-fraction: $rr-generate-grid-breakpoints !default;
$rr-generate-grid-breakpoints-normal: $rr-generate-grid-breakpoints !default;
$rr-generate-grid-helper: $rr-generate-grid-breakpoints !default;
$rr-generate-grid-settings: $rr-generate-settings !default;

/////////////////////
// INTERNAL VARIABLES
/////////////////////

// Default breakpoint
$rr-grid-breakpoints-default: map-default($rr-grid-breakpoints);

// Set current breakpoint to default
$rr-grid-current-breakpoint: str-unquote($rr-grid-breakpoints-default);

// Breakpoint names
$rr-grid-breakpoints-names: map-keys($rr-grid-breakpoints);

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function grid-breakpoint-exists($name) {
	@return entry-exists($rr-grid-breakpoints, $name);
}

// Gets an entry by name
@function grid-breakpoint-entry($name: null) {
	@return get-entry-by-name($rr-grid-breakpoints, $name, $rr-grid-breakpoints-default);
}

// Get an entry property value by name
@function grid-breakpoint-property($name, $property) {
	@return get-entry-property(
		$rr-grid-breakpoints,
		$name,
		$property,
		$rr-grid-breakpoint-map-defaults,
		$rr-grid-breakpoints-default
	);
}

// Check if breakpoint is default breakpoint
@function grid-is-default($name) {
	@return $name == $rr-grid-breakpoints-default or $name == '';
}

// Get a breakpoint gutter with optional multiplier by name
@function grid-gutter($name: null, $multiplier: 1) {
	$gutter: grid-breakpoint-property($name, 'gutter');

	@if is-number($gutter) and is-number($multiplier) {
		$gutter: $gutter * $multiplier;
	}

	@return $gutter;
}

// Get a breakpoint gutter with 0.5x multiplier by name
@function grid-gutter-half($name) {
	@return grid-gutter($name, 0.5);
}

// Get a breakpoint gutter with 2x multiplier by name
@function grid-gutter-double($name) {
	@return grid-gutter($name, 2);
}

// Get breakpoint map index by name
@function grid-breakpoint-index($name) {
	@return index($rr-grid-breakpoints-names, $name);
}

// Get calculated breakpoint max-width by name
// @todo: smarter and shorter
@function grid-calculate-max-width($name) {
	$max-width: null;

	@if grid-breakpoint-exists($name) {
		$return-max-width: 0;
		$breakpoint-index: grid-breakpoint-index($name) + 1;

		@if $breakpoint-index > 0 and $breakpoint-index <= length($rr-grid-breakpoints) {
			$max-width-name: nth($rr-grid-breakpoints-names, $breakpoint-index);
			$min-width-value: grid-breakpoint-property($max-width-name, 'min-width');

			@if is-number($min-width-value) {
				$return-max-width: $min-width-value - 1;
			}
		}

		$max-width: $return-max-width;
	}

	@return $max-width;
}

// Get current breakpoint gutter with optional multiplier
@function grid-gutter-current($multiplier: 1) {
	@return grid-gutter($rr-grid-current-breakpoint) * $multiplier;
}

// Get breakpoint prefix
@function grid-breakpoint-prefix($breakpoint-name, $ignore-default: true) {
	$prefix: '';

	@if not grid-is-default($breakpoint-name) or not $ignore-default {
		$prefix: '#{$breakpoint-name}\\:';
	}

	@return $prefix;
}

// Get basic class with exceptions
// @todo: experimental, testing in other modules
@function grid-class-name-with-extend-exceptions($breakpoint-name, $class, $class-exception) {
	$return: $class;
	$breakpoint-index: index($rr-grid-breakpoints-names, $breakpoint-name);

	@if $breakpoint-index >= 3 {
		@for $index from 3 through $breakpoint-index + 1 {
			$breakpoint: nth($rr-grid-breakpoints-names, $index - 1);
			$return: $return + ':not(.' + grid-breakpoint-prefix($breakpoint, true) + $class + '-' + $class-exception + ')';
		}
	}

	@return $return;
}

/////////
// MIXINS
/////////

// Media query with all options
@mixin mq($name: null, $min-width: null, $max-width: null, $media-type: 'screen') {
	$media-query: '';

	@if $name == 'print' {
		$media-type: 'print';
	} @else if is-not-null($name) {
		$name: if(type-of($name) != 'list', ($name), $name);

		@each $name-part in $name {
			// Get breakpoint data
			@if not in-list(('portrait', 'landscape', 'hover', 'touch', 'only', 'up', 'down'), $name-part) {
				$min-width: $name-part;
				$max-width: null;

				@if in-list($name, 'only') {
					$max-width: $name-part;
				}

				@if in-list($name, 'down') {
					$min-width: null;
					$max-width: $name-part;
				}
			}

			// Append orientation
			@if $name-part == 'portait' {
				$media-query: '#{$media-query} and (orientation: portrait)';
			}

			@if $name-part == 'landscape' {
				$media-query: '#{$media-query} and (orientation: landscape)';
			}

			// Append hover
			@if $name-part == 'hover' {
				$media-query: '#{$media-query} and (hover: hover)';
			}

			@if $name-part == 'touch' {
				$media-query: '#{$media-query} and (hover: none)';
			}
		}
	}

	// Append min width
	@if not is-number($min-width) and is-not-null($min-width) {
		$min-width: grid-breakpoint-property($min-width, 'min-width');
	}

	@if is-number($min-width) and $min-width != 0 {
		$media-query: '#{$media-query} and (min-width: #{$min-width})';
	}

	// Append max width
	@if not is-number($max-width) and is-not-null($max-width) {
		$max-width: grid-calculate-max-width($max-width);
	}

	@if is-number($max-width) and $max-width != 0 {
		$media-query: '#{$media-query} and (max-width: #{$max-width})';
	}

	// Prepend media type
	@if $media-type == 'screen' {
		@if str-length($media-query) > 0 {
			$media-query: '#{$media-type}#{$media-query}';
		}
	} @else {
		$media-query: '#{$media-type}#{$media-query}';
	}

	// Output media query
	@if str-length($media-query) == 0 {
		@content;
	} @else {
		@media #{$media-query} {
			@content;
		}
	}
}

// Media query up
@mixin mq-up($name) {
	@include mq($min-width: $name) {
		@content;
	}
}

// Media query down
@mixin mq-down($name) {
	@include mq($max-width: $name) {
		@content;
	}
}

// Media query only
@mixin mq-only($name) {
	@include mq($min-width: $name, $max-width: $name) {
		@content;
	}
}

// Media query landscape
@mixin mq-landscape() {
	@include mq(landscape) {
		@content;
	}
}

// Media query portrait
@mixin mq-portrait() {
	@include mq(portrait) {
		@content;
	}
}

// Media query print only
@mixin mq-print() {
	@media print {
		@content;
	}
}

// Media query primary input mechanism can hover
@mixin mq-hover($can-hover: true) {
	@media (hover: if($can-hover, hover, none)) {
		@content;
	}
}

// Media query primary input mechanism cant hover
@mixin mq-touch() {
	@media (hover: none) {
		@content;
	}
}

/////////
// OUTPUT
/////////

@mixin generate-grid-core-output($breakpoint-prefix: '', $breakpoint-prefix-short: '', $breakpoint-name: '') {
	@if $rr-generate-grid-breakpoints {
		// Grid base
		@if grid-is-default($breakpoint-name) {
			// Container
			.#{$rr-grid-container-class} {
				max-width: none;
			}

			// Row
			.#{$rr-grid-row-class} {
				display: flex;
				flex-wrap: wrap;
				//width: 100%;
				flex-grow: 1;
			}

			// Column
			.#{$rr-grid-column-class} {
				flex: 0 0 100%;
			}

			// Column force line break
			.#{$rr-grid-line-break-class} {
				flex: 1 1 100%;
				height: 0;
				width: auto;
				overflow: hidden;
			}
		}

		// Get breakpoint properties
		$breakpoint-columns: grid-breakpoint-property($breakpoint-name, 'columns');
		$breakpoint-base-size: grid-breakpoint-property($breakpoint-name, 'base-size');
		$breakpoint-container-width: grid-breakpoint-property($breakpoint-name, 'container-width');
		$breakpoint-container-spacing: grid-breakpoint-property($breakpoint-name, 'container-spacing');
		$breakpoint-container-alignment: grid-breakpoint-property($breakpoint-name, 'container-alignment');

		// Apply media query
		:root {
			--rr-grid-column-base: #{$breakpoint-columns};
		}

		// Base size
		@if is-number($breakpoint-base-size) {
			body {
				font-size: $breakpoint-base-size;
			}
		}

		// Container
		//.#{grid-class-name-with-extend-exceptions($breakpoint-name, $rr-grid-container-class, $rr-global-unset-class)},
		.#{$rr-grid-container-class},
		.#{$breakpoint-prefix}#{$rr-grid-container-class} {
			margin-right: $breakpoint-container-spacing;
			margin-left: $breakpoint-container-spacing;

			@if is-number($breakpoint-container-width) {
				max-width: $breakpoint-container-width;

				@if $breakpoint-container-alignment == right {
					margin-left: auto;
				} @else if $breakpoint-container-alignment == left {
					margin-right: auto;
				} @else if $breakpoint-container-alignment == center {
					margin-left: auto;
					margin-right: auto;
				}
			}
		}

		// Container unset
		@if $breakpoint-prefix-short != '' {
			.#{$breakpoint-prefix-short}#{$rr-grid-container-class}-#{$rr-global-unset-class} {
				max-width: unset;
				margin-right: unset;
				margin-left: unset;
			}
		}

		// Row column combination width
		// .#{$rr-grid-container-class}.#{$rr-grid-row-class},
		// .#{$breakpoint-prefix}#{$rr-grid-container-class}.#{$rr-grid-row-class} {
		// 	@if $breakpoint-container-spacing > 0 {
		// 		//width: calc(100% - #{$breakpoint-container-spacing * 2});
		// 	} @else {
		// 		//width: 100%;
		// 	}
		// }

		// Row gutter fix
		.#{$rr-grid-row-class} .#{$rr-grid-row-class} {
			margin-left: -(grid-gutter-half($breakpoint-name));
			margin-right: -(grid-gutter-half($breakpoint-name));
			//width: calc(100% + #{grid-gutter($breakpoint-name)});
		}

		// Column gutter
		.#{$rr-grid-column-class},
		.#{$breakpoint-prefix-short}#{$rr-grid-row-gutter-class} > .#{$rr-grid-column-class} {
			padding-left: grid-gutter-half($breakpoint-name);
			padding-right: grid-gutter-half($breakpoint-name);
		}

		// Gutter reset
		.#{$breakpoint-prefix-short}#{$rr-grid-row-nogutter-class} {
			> .#{$rr-grid-column-class} {
				padding-left: 0;
				padding-right: 0;

				.#{$rr-grid-row-class} {
					margin-left: 0;
					margin-right: 0;
				}
			}
		}

		// Column (normal)
		@if $rr-generate-grid-breakpoints-normal {
			@for $column-index from 1 through $breakpoint-columns {
				// Breakpoint
				.#{$rr-grid-column-class}.#{$breakpoint-prefix}#{$column-index},
				.#{$rr-grid-row-class}.#{$breakpoint-prefix}#{$column-index} > .#{$rr-grid-column-class} {
					flex: 0 0 calc(#{$column-index} / var(--rr-grid-column-base) * 100%);

					> * {
						--rr-grid-column-base: #{$column-index};
					}

					.#{$rr-grid-row-class}--#{$rr-global-reset-class} {
						--rr-grid-column-base: #{$breakpoint-columns};
					}
				}

				// Offset
				.#{$breakpoint-prefix}#{$rr-grid-offset-class-prefix}#{$column-index} {
					margin-left: calc(#{$column-index} / var(--rr-grid-column-base) * 100%);
				}
			}
		}

		// Column (fraction)
		$fractions-added: ();

		@if $rr-generate-grid-breakpoints-fraction {
			@for $denominator from 1 through $rr-grid-breakpoint-fraction-steps {
				@for $numerator from 1 through $denominator {
					@if $numerator != $denominator {
						$percent: 100% / $denominator * $numerator;
						$fraction-class: '#{$numerator}#{$rr-grid-breakpoint-fraction-prefix-delimiter}#{$denominator}';

						@if not in-list($fractions-added, $percent) {
							// Breakpoint
							.#{$rr-grid-column-class}.#{$breakpoint-prefix}#{$fraction-class},
							.#{$rr-grid-row-class}.#{$breakpoint-prefix}#{$fraction-class} > .#{$rr-grid-column-class} {
								flex: 0 0 $percent;
							}

							// Offset
							.#{$breakpoint-prefix}#{$rr-grid-offset-class-prefix}#{$numerator}#{$rr-grid-breakpoint-fraction-prefix-delimiter}#{$denominator} {
								margin-left: $percent;
							}

							$fractions-added: append($fractions-added, $percent);
						}

					}
				}
			}
		}

		// Column (all) full width
		.#{$rr-grid-column-class}.#{$breakpoint-prefix}#{$rr-global-full-class},
		.#{$rr-grid-row-class}.#{$breakpoint-prefix}#{$rr-global-full-class} > .#{$rr-grid-column-class} {
			flex: 0 0 100%;

			> * {
				--rr-grid-column-base: #{$breakpoint-columns};
			}
		}

		// Column (all) auto fill width
		.#{$rr-grid-column-class}.#{$breakpoint-prefix}#{$rr-grid-column-auto-class},
		.#{$rr-grid-row-class}.#{$breakpoint-prefix}#{$rr-grid-column-auto-class} > .#{$rr-grid-column-class} {
			flex: 1 1 0px;
		}

		.#{$rr-grid-column-class}.#{$breakpoint-prefix}#{$rr-grid-column-shrink-class},
		.#{$rr-grid-row-class}.#{$breakpoint-prefix}#{$rr-grid-column-shrink-class} > .#{$rr-grid-column-class} {
			flex: 0 0 auto;
		}

		// Column (all) reset
		.#{$breakpoint-prefix}#{$rr-grid-reset-class} {
			margin-left: 0;
		}
	}
}

@mixin generate-grid-helper-core-output() {
	@if $rr-generate-grid-helper {
		.#{$rr-grid-helper-info-class} {
			display: inline-flex;
			align-items: center;
			position: fixed;
			z-index: $rr-grid-helper-info-z-index;
			top: $rr-grid-helper-info-position-top;
			right: $rr-grid-helper-info-position-right;
			bottom: $rr-grid-helper-info-position-bottom;
			left: $rr-grid-helper-info-position-left;
			padding: 7px;
			background-color: rgba($rr-grid-helper-info-primary-color, 0.8);
			border: 1px solid darken($rr-grid-helper-info-primary-color, 20%);
			color: $rr-grid-helper-info-secondary-color;
			font-size: 18px;
			font-family: 'Courier New', monospace;
			font-weight: bold;
			line-height: 14px;
			cursor: pointer;

			&::before {
				font-size: 1em;
				text-transform: uppercase;
				content: var(--rr-current-breakpoint) '-' var(--rr-current-columns) ' ' attr(data-rr-window-width);
			}

			input[type=checkbox] {
				margin: 0 !important;
				margin-left: 8px !important;
				height: 15px !important;
				width: 15px  !important;
				background-color: $rr-grid-helper-info-secondary-color !important;
				border: 1px solid darken($rr-grid-helper-info-primary-color, 20%);
				appearance: none !important;
				outline: none !important;
				box-shadow: none !important;
				cursor: pointer !important;

				&:hover {
					background-color: lighten($rr-grid-helper-info-primary-color, 20%) !important;
				}

				&:checked {
					background-color: darken($rr-grid-helper-info-primary-color, 20%) !important;
				}
			}
		}

		.#{$rr-grid-helper-grid-class} {
			display: none;
			position: fixed;
			z-index: $rr-grid-helper-z-index;
			top: 0;
			bottom: 0;
			width: 100%;
			overflow: hidden;
			pointer-events: none;

			.#{$rr-grid-row-class} {
				height: 100%;
				background-color: $rr-grid-helper-gutter-background-color;
			}

			.#{$rr-grid-column-class} {
				height: 100%;

				&::before {
					content: '';
					display: block;
					height: 100%;
					background-color: $rr-grid-helper-column-background-color;
					border-left: 1px solid $rr-grid-helper-column-border-color;
					border-right: 1px solid $rr-grid-helper-column-border-color;
				}
			}
		}

		.#{$rr-grid-helper-grid-shower-class} {
			display: block;
		}
	}
}

/////////////////////////
// APPEND GLOBAL SETTINGS
/////////////////////////

@if $rr-generate-grid-settings() {
	$grid-breakpoints: ();

	@each $breakpoint-name, $breakpoint-entry in $rr-grid-breakpoints {
		$grid-breakpoints: map-merge($grid-breakpoints, (
			$breakpoint-name: (
				'columns': grid-breakpoint-property($breakpoint-name, 'columns'),
				'gutter': grid-breakpoint-property($breakpoint-name, 'gutter')
			)
		));
	}

	$grid-settings: (
		'breakpoints': $grid-breakpoints,
		'classes': (
			'container': $rr-grid-container-class,
			'row': $rr-grid-row-class,
			'column': $rr-grid-column-class,
			'delimiter': $rr-grid-column-prefix-delimiter
		),
		'helper': (
			'enabled': $rr-grid-helper-enabled,
			'infoClass': $rr-grid-helper-info-class,
			'gridClass': $rr-grid-helper-grid-class,
			'gridShowerClass': $rr-grid-helper-grid-shower-class,
		)
	);

	$rr-global-settings: map-merge($rr-global-settings, ( grid: $grid-settings ) ) !global;
}
