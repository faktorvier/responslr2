///////////////////
// DEFAULT SETTINGS
///////////////////

// Mobile first or desktop first
$rr-grid-mobile-first: true !default;

// Classes
$rr-grid-row-class: 'row' !default;
$rr-grid-column-class: 'column' !default;
$rr-grid-column-auto-class: $rr-global-auto-class !default;
$rr-grid-column-shrink-class: 'shrink' !default;
$rr-grid-column-normal-class: 'normal' !default;
//$rr-grid-row-reset-class: 'row-reset' !default;
$rr-grid-reset-class: $rr-global-reset-class !default;
$rr-grid-line-break-class: 'column-break' !default;
$rr-grid-container-class: 'container' !default;

$rr-grid-offset-class-prefix: 'offset-' !default;
$rr-grid-inset-class-prefix: 'inset-' !default;

// Breakpoints
$rr-grid-default-breakpoints: ();

@if $rr-grid-mobile-first {
	$rr-grid-default-breakpoints: (
		's': (
			'columns': 6,
			'gutter': 32px
		),
		'm': (
			'min-width': 641px,
			'columns': 12,
			'gutter': 32px
		),
		'l': (
			'min-width': 961px,
			'columns': 12,
			'gutter': 24px
		),
		'xl': (
			'min-width': 1440px,
			'columns': 12,
			'gutter': 24px
		)
	);

} @else {
	$rr-grid-default-breakpoints: (
		'xl': (
			'columns': 16,
			'gutter': 24px
		),
		'l': (
			'columns': 12,
			'gutter': 24px
		),
		'm': (
			'max-width': 960px,
			'columns': 12,
			'gutter': 32px
		),
		's': (
			'max-width': 640px,
			'columns': 6,
			'gutter': 32px
		)
	);
}

$rr-grid-breakpoints: $rr-grid-default-breakpoints !default;

// Defaults
$rr-grid-breakpoint-map-defaults: (
	'columns': null,
	'min-width': null,
	'max-width': null,
	'gutter': 0,
	'base-size': null,
	'container-width': null,
	'container-alignment': 'center',
	'container-spacing': 0
);

$rr-grid-breakpoints-default: map-default($rr-grid-breakpoints) !default;

// Percentage columns steps
$rr-grid-breakpoint-fraction-steps: 6 !default;

// Grid helper
$rr-grid-helper-z-index: 100000 !default;
$rr-grid-helper-column-background-color: rgba(36,156,213,.5) !default;
$rr-grid-helper-column-border-color: $rr-grid-helper-column-background-color !default;
$rr-grid-helper-gutter-background-color: rgba(39,174,96,.25) !default;

$rr-grid-helper-info-z-index: 100001 !default;
$rr-grid-helper-info-background-color: rgba(0,0,0,.7) !default;
$rr-grid-helper-info-text-color: white !default;
$rr-grid-helper-info-text-size: 18px !default;
$rr-grid-helper-info-padding: 5px !default;
$rr-grid-helper-info-position-top: auto !default;
$rr-grid-helper-info-position-right: 10px !default;
$rr-grid-helper-info-position-bottom: 10px !default;
$rr-grid-helper-info-position-left: auto !default;

$rr-grid-helper-show: true !default;
$rr-grid-helper-show-grid: $rr-grid-helper-show !default;
$rr-grid-helper-show-breakpoint: $rr-grid-helper-show !default;

$rr-grid-helper-info-class: 'responslr-grid-helper-info' !default;
$rr-grid-helper-grid-class: 'responslr-grid-helper' !default;
$rr-grid-helper-grid-shower-class: 'responslr-grid-helper__show' !default;

// Print output for this module
$rr-generate-grid-breakpoints: $rr-generate-classes !default;
$rr-generate-grid-breakpoints-fraction: $rr-generate-grid-breakpoints !default;
$rr-generate-grid-breakpoints-normal: $rr-generate-grid-breakpoints !default;
$rr-generate-grid-helper: $rr-generate-grid-breakpoints !default;
$rr-generate-grid-settings: $rr-generate-settings !default;

/////////////////////
// INTERNAL VARIABLES
/////////////////////

// Set current breakpoint to default
$rr-grid-current-breakpoint: str-unquote($rr-grid-breakpoints-default);

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function grid-breakpoint-exists($name) {
	@return entry-exists($rr-grid-breakpoints, $name);
}

// Gets an entry by name
@function grid-breakpoint-entry($name: null) {
	@return get-entry-by-name($rr-grid-breakpoints, $name, $rr-grid-breakpoints-default);
}

// Get an entry property value by name
@function grid-breakpoint-property($name, $property) {
	@return get-entry-property(
		$rr-grid-breakpoints,
		$name,
		$property,
		$rr-grid-breakpoint-map-defaults,
		$rr-grid-breakpoints-default
	);
}

// Check if breakpoint is default breakpoint
@function grid-is-default($name) {
	@return $name == $rr-grid-breakpoints-default;
}

// Get a breakpoint gutter with optional multiplier by name
@function grid-gutter($name: null, $multiplier: 1) {
	$gutter: grid-breakpoint-property($name, 'gutter');

	@if is-number($gutter) and is-number($multiplier) {
		$gutter: $gutter * $multiplier;
	}

	@return $gutter;
}

// Get a breakpoint gutter with 0.5x multiplier by name
@function grid-gutter-half($name) {
	@return grid-gutter($name, 0.5);
}

// Get a breakpoint gutter with 2x multiplier by name
@function grid-gutter-double($name) {
	@return grid-gutter($name, 2);
}

// Get breakpoint map index by name
@function grid-breakpoint-index($name) {
	@return index(map-keys($rr-grid-breakpoints), $name);
}

// Get calculated breakpoint min-width by name
@function grid-calculate-min-width($name) {
	$min-width: null;

	@if grid-breakpoint-exists($name) {
		$return-min-width: 0;
		$breakpoint-index: grid-breakpoint-index($name) + 1;

		@if $breakpoint-index > 0 and $breakpoint-index <= length($rr-grid-breakpoints) {
			$min-width-name: nth(map-keys($rr-grid-breakpoints), $breakpoint-index);
			$max-width-value: grid-breakpoint-property($min-width-name, 'max-width');

			@if is-number($max-width-value) {
				$return-min-width: $max-width-value + 1;
			}
		}

		$min-width: $return-min-width;
	}

	@return $min-width;
}

// Get calculated breakpoint max-width by name
@function grid-calculate-max-width($name) {
	$max-width: null;

	@if grid-breakpoint-exists($name) {
		$return-max-width: 0;
		$breakpoint-index: grid-breakpoint-index($name) + 1;

		@if $breakpoint-index > 0 and $breakpoint-index <= length($rr-grid-breakpoints) {
			$max-width-name: nth(map-keys($rr-grid-breakpoints), $breakpoint-index);
			$min-width-value: grid-breakpoint-property($max-width-name, 'min-width');

			@if is-number($min-width-value) {
				$return-max-width: $min-width-value - 1;
			}
		}

		$max-width: $return-max-width;
	}

	@return $max-width;
}

// Get calculated breakpoint column width
@function grid-calculate-column-width($columns-size, $columns-max) {
	@return (($columns-size / $columns-max) * 100%);
}

// Get current breakpoint gutter with optional multiplier
@function grid-gutter-current($multiplier: 1) {
	@return grid-gutter($rr-grid-current-breakpoint) * $multiplier;
}

// Adds a breakpoint prefix to a class
@function grid-class-prefix($breakpoint-name, $class, $use-default: true, $bp-suffix: '') {
	$selector: '';

	@if is-empty($breakpoint-name) or (grid-is-default($breakpoint-name) and $use-default) {
		$selector: $class;
	} @else {
		$selector: str-insert($class, '#{$breakpoint-name}#{$bp-suffix}\\:', 2);
	}


	// $selector: str-insert($class, '#{$breakpoint-name}:', 2);

	// @if grid-is-default($breakpoint-name) and $use-default {
	// 	@if is-empty($class) {
	// 		$selector: $class;
	// 	} @else {
	// 		$selector: $class + ', ' + $selector;
	// 	}
	// }

	@return escape-selector($selector);
}

// Get properties by breakpoint
@function grid-properties-by-breakpoint($properties, $breakpoint-name) {
	@if map-has-key($properties, 'breakpoints') and $breakpoint-name != $rr-grid-breakpoints-default {
		$breakpoint-properties: map-get($properties, 'breakpoints');

		@if map-not-empty($properties) and map-has-key($breakpoint-properties, $breakpoint-name) {
			$properties: map-get($breakpoint-properties, $breakpoint-name);
		}
	}

	@return $properties;
}

/////////
// MIXINS
/////////

// Media query with all options
@mixin mq($name: null, $max-width: null, $min-width: null, $media-orientation: null, $pointer: null) {
	// possible future keywords:
	// - s, m, l, xl (breakpoints)
	// - only, up, down
	// - landscape, portrait
	// - touch, mouse, stylus
	// - print

	$breakpoint-max: '';
	$breakpoint-min: '';
	$breakpoint-orientation: '';

	$min-width-content: null;
	$max-width-content: null;

	@if $name != null {
		$breakpoint-name: $name;
		$rr-grid-current-breakpoint: $breakpoint-name !global;
		$breakpoint-only: false;

		@if str-index($name, '-only') != null {
			$breakpoint-name: str-slice($name, 1, str-index($name, '-only') - 1);
			$breakpoint-only: true;
		}

		@if $rr-grid-mobile-first {
			$min-width-content: grid-breakpoint-property($breakpoint-name, 'min-width');

			@if $breakpoint-only {
				$max-width-content: grid-calculate-max-width($breakpoint-name);
			}
		} @else {
			$max-width-content: grid-breakpoint-property($breakpoint-name, 'max-width');

			@if $breakpoint-only {
				$min-width-content: grid-calculate-min-width($breakpoint-name);
			}
		}

	} @else {
		@if is-number($max-width) {
			$max-width-content: $max-width;
		} @else {

			@if $rr-grid-mobile-first {
				$max-width-content: grid-calculate-max-width($max-width);
			} @else {
				$max-width-content: grid-breakpoint-property($max-width, 'max-width');
			}
		}

		@if is-number($min-width) {
			$min-width-content: $min-width;
		} @else {
			@if $rr-grid-mobile-first == false {
				$min-width-content: grid-calculate-min-width($min-width);
			} @else {
				$min-width-content: grid-breakpoint-property($min-width, 'min-width');
			}
		}
	}

	@if is-not-null($min-width-content) or is-not-null($max-width-content) or is-not-null($media-orientation) {
		@if is-not-null($min-width-content) {
			$breakpoint-min: ' and (min-width: #{$min-width-content})';
		}

		@if is-not-null($max-width-content) and $max-width-content != 0 {
			$breakpoint-max: ' and (max-width: #{$max-width-content})';
		}

		@if $media-orientation == 'portrait' or $media-orientation == 'landscape' {
			$breakpoint-orientation: ' and (orientation: #{$media-orientation})';
		}

		$media: 'only screen' + $breakpoint-min + $breakpoint-max + $breakpoint-orientation + ', print';

		@media #{$media} { @content; };
	} @else {
		@content;
	}

	$rr-grid-current-breakpoint: str-unquote($rr-grid-breakpoints-default) !global;
}

// Media query up
@mixin mq-up($name) {
	@include mq($min-width: $name) {
		@content;
	}
}

// Media query down
@mixin mq-down($name) {
	@include mq($max-width: $name) {
		@content;
	}
}

// Media query only
@mixin mq-only($name) {
	@include mq($min-width: $name, $max-width: $name) {
		@content;
	}
}

// Media query landscape
@mixin mq-landscape($name: null) {
	@include mq($name: $name, $media-orientation: landscape) {
		@content;
	}
}

// Media query portrait
@mixin mq-portrait($name: null) {
	@include mq($name: $name, $media-orientation: portrait) {
		@content;
	}
}

// Media query print only
@mixin mq-print() {
	@media print {
		@content;
	}
}

// Media query main pointer is mouse
@mixin mq-mouse() {
	@include mq($min-width: $name, $max-width: $name, $pointer: mouse) {
		@content;
	}

	// @media (pointer: fine) {
	//     /* ... */
	// }
}

// Media query main pointer is finger
@mixin mq-touch() {
	@include mq($min-width: $name, $max-width: $name, $pointer: finger) {
		@content;
	}

	// /* smartphones, touchscreens */
	// @media (hover: none) and (pointer: coarse) {
	//     /* ... */
	// }
}

// Media query main pointer is stylus
@mixin mq-stylus() {
	@include mq($min-width: $name, $max-width: $name, $pointer: stylus) {
		@content;
	}

	// /* stylus-based screens */
	// @media (hover: none) and (pointer: fine) {
	//     /* ... */
	// }
}

// Output for every breakpoint (not working with the current sass version)
// @mixin mq-clone-output() {
// 	@each $breakpoint-name, $breakpoint in $rr-grid-breakpoints {
// 		@include mq($breakpoint-name) {
// 			@content($breakpoint-name);
// 		}
// 	}
// }

// Generate breakpoint classes for a single property
@mixin mq-generate-property-classes-simple($property, $values, $class-prefix, $generate: (normal, up, down, only), $use-default: true) {
	$classes: ();

	@each $value in $values {
		$class-name: $value;
		$property-value: $value;

		@if is-list($value) {
			$class-name: nth($value, 1);
			$property-value: nth($value, 2);
		}

		$classes: map-merge($classes, (
			$class-name: (
				$property: $property-value
			)
		));
	}

	@include mq-generate-property-classes($classes, $class-prefix, $generate, $use-default);
}

// Generate breakpoint classes for multiple properties
@mixin mq-generate-property-classes($classes, $class-prefix, $generate: (normal, up, down, only), $use-default: true) {
	$breakpoint-names: map-keys($rr-grid-breakpoints);
	$first-breakpoint: nth($breakpoint-names, 1);
	$last-breakpoint: nth($breakpoint-names, length($breakpoint-names));
	$single-breakpoint: $first-breakpoint == $last-breakpoint;

	@each $breakpoint-name, $breakpoint in $rr-grid-breakpoints {
		$is-first-breakpoint: $breakpoint-name == $rr-grid-breakpoints-default;
		$is-last-breakpoint: $breakpoint-name == $last-breakpoint;
		$is-smallest-breakpoint: if($rr-grid-mobile-first, $is-first-breakpoint, $is-last-breakpoint) or $single-breakpoint;
		$is-largest-breakpoint: if($rr-grid-mobile-first, $is-last-breakpoint, $is-first-breakpoint) or $single-breakpoint;

		// Normal
		@if in-list($generate, normal) {
			@include mq($breakpoint-name) {
				// Breakpoint overwrites
				@each $class-name, $properties in $classes {
					@if map-has-key($properties, 'breakpoints') and not $is-first-breakpoint {
						$breakpoint-properties: map-get($properties, 'breakpoints');

						@if map-not-empty($properties) and map-has-key($breakpoint-properties, $breakpoint-name) {
							$properties-overwrite-raw: map-get($breakpoint-properties, $breakpoint-name);
							$properties-overwrite: ();

							@each $overwrite-property, $overwrite-value in $properties-overwrite-raw {
								$original-value: map-get($properties, $overwrite-property);

								@if is-null($original-value) or $original-value != $overwrite-value {
									$properties-overwrite: map-append($properties-overwrite, $overwrite-value, $overwrite-property);
								}
							}

							#{escape-selector('.#{$class-prefix}#{$class-name}')} {
								@content;
								@include generate-properties($properties-overwrite);
							}
						}
					}
				}

				// Normal breakpoint classes
				@each $class-name, $properties in $classes {
					// Breakpoint overwrites
					$properties: grid-properties-by-breakpoint($properties, $breakpoint-name);

					@if not $rr-grid-mobile-first and not $is-last-breakpoint {
						#{grid-class-prefix($breakpoint-name, '.#{$class-prefix}#{$class-name}', $use-default)},
						#{grid-class-prefix($breakpoint-name, '.#{$class-prefix}#{$class-name}', false, '-up')} {
							@content;
							@include generate-properties($properties);
						}
					} @else if not $rr-grid-mobile-first and not $is-first-breakpoint {
						#{grid-class-prefix($breakpoint-name, '.#{$class-prefix}#{$class-name}', $use-default)},
						#{grid-class-prefix($breakpoint-name, '.#{$class-prefix}#{$class-name}', false, '-down')} {
							@content;
							@include generate-properties($properties);
						}
					} @else if $class-name != $rr-global-reset-class or not $is-first-breakpoint {
						#{grid-class-prefix($breakpoint-name, '.#{$class-prefix}#{$class-name}', $use-default)} {
							@content;
							@include generate-properties($properties);
						}
					}
				}
			}
		}

		// Up
		// @if not $rr-grid-mobile-first and not $is-largest-breakpoint and not $is-first-breakpoint and in-list($generate, up) {
		// 	@include mq-up($breakpoint-name) {
		// 		@each $class-name, $properties in $classes {
		// 			// Breakpoint overwrites
		// 			$properties: grid-properties-by-breakpoint($properties, $breakpoint-name);

		// 			#{grid-class-prefix($breakpoint-name, '.#{$class-prefix}#{$class-name}', false, '-up')} {
		// 				@content;
		// 				@include generate-properties($properties);
		// 			}
		// 		}
		// 	}
		// }

		// Down
		// @if $rr-grid-mobile-first and not $is-smallest-breakpoint and not $is-last-breakpoint and in-list($generate, down) {
		// 	@include mq-down($breakpoint-name) {
		// 		@each $class-name, $properties in $classes {
		// 			// Breakpoint overwrites
		// 			$properties: grid-properties-by-breakpoint($properties, $breakpoint-name);

		// 			#{grid-class-prefix($breakpoint-name, '.#{$class-prefix}#{$class-name}', false, '-down')} {
		// 				@content;
		// 				@include generate-properties($properties);
		// 			}
		// 		}
		// 	}
		// }

		// Only
		@if not $is-last-breakpoint and in-list($generate, only) {
			@include mq-only($breakpoint-name) {
				@each $class-name, $properties in $classes {
					// Breakpoint overwrites
					$properties: grid-properties-by-breakpoint($properties, $breakpoint-name);

					#{grid-class-prefix($breakpoint-name, '.#{$class-prefix}#{$class-name}', false, '-only')} {
						@content;
						@include generate-properties($properties);
					}
				}
			}
		}
	}
}

/****************/
/* OUTPUT: GRID */
/****************/

@if $rr-generate-grid-breakpoints and map-not-empty($rr-grid-breakpoints) {
	// Container
	.#{$rr-grid-container-class} {
		max-width: none;
	}

	// Row
	.#{$rr-grid-row-class}:not(tr) {
		display: flex;
		flex-wrap: wrap;
	}

	// Column
	.#{$rr-grid-column-class}:not(td):not(th) {
		flex: 0 0 auto;
		width: 100%;
	}

	// Breakpoints
	@each $breakpoint-name, $breakpoint in $rr-grid-breakpoints {
		// Get breakpoint properties
		$breakpoint-columns: grid-breakpoint-property($breakpoint-name, 'columns');
		$breakpoint-column-width: 100% / $breakpoint-columns;
		$breakpoint-base-size: grid-breakpoint-property($breakpoint-name, 'base-size');
		$breakpoint-container-width: grid-breakpoint-property($breakpoint-name, 'container-width');
		$breakpoint-container-spacing: grid-breakpoint-property($breakpoint-name, 'container-spacing');
		$breakpoint-container-alignment: grid-breakpoint-property($breakpoint-name, 'container-alignment');

		// Apply media query
		@include mq($breakpoint-name) {
			// Base size
			@if is-number($breakpoint-base-size) {
				body {
					font-size: $breakpoint-base-size;
				}
			}

			// Container
			@if is-number($breakpoint-container-width) {
				.#{$rr-grid-container-class} {
					max-width: $breakpoint-container-width;

					@if $breakpoint-container-alignment == right {
						margin-right: $breakpoint-container-horizontal-margin;
						margin-left: auto;
					} @else if $breakpoint-container-alignment == left {
						margin-right: auto;
						margin-left: $breakpoint-container-horizontal-margin;
					} @else if $breakpoint-container-alignment == center {
						margin-left: auto;
						margin-right: auto;
					}
				}
			}

			// Row
			.#{$rr-grid-row-class} .#{$rr-grid-row-class} {
				margin-left: -(grid-gutter-half($breakpoint-name));
				margin-right: -(grid-gutter-half($breakpoint-name));
			}

			// Column (normal)
			.#{$rr-grid-column-class} {
				padding-left: grid-gutter-half($breakpoint-name);
				padding-right: grid-gutter-half($breakpoint-name);
			}

			@if $rr-generate-grid-breakpoints-normal {
				@for $column-index from $breakpoint-columns through 1 {
					// Offset
					#{grid-class-prefix($breakpoint-name, '.#{$rr-grid-offset-class-prefix}#{$column-index}', false)} {
						margin-left: $breakpoint-column-width * $column-index;
					}

					// Inset
					#{grid-class-prefix($breakpoint-name, '.#{$rr-grid-inset-class-prefix}#{$column-index}', false)} {
						//margin-left: (-$breakpoint-column-width * $column-index) - 0.02%; // @todo: old, is this -0.02 still necessary?
						margin-left: -$breakpoint-column-width * $column-index;
					}

					// Breakpoint
					#{grid-class-prefix($breakpoint-name, '.#{$column-index}', false)} {
						//&, .#{$rr-grid-row-class}.#{$rr-grid-row-reset-class} & {
							width: $breakpoint-column-width * $column-index;

							@for $sub-column-index from $column-index through 1 {
								// Offset nested
								#{grid-class-prefix($breakpoint-name, '.#{$rr-grid-offset-class-prefix}#{$sub-column-index}', false)} {
									margin-left: (($breakpoint-column-width * $sub-column-index) / ($breakpoint-column-width * $column-index)) * 100%;
								}

								// Inset nested
								#{grid-class-prefix($breakpoint-name, '.#{$rr-grid-inset-class-prefix}#{$sub-column-index}', false)} {
									//margin-left: (((-$breakpoint-column-width * $sub-column-index) / ($breakpoint-column-width * $column-index)) * 100%) - 0.02%; // @todo: old, is this -0.02 still necessary?
									margin-left: (((-$breakpoint-column-width * $sub-column-index) / ($breakpoint-column-width * $column-index)) * 100%);
								}

								// Breakpoint nested
								#{grid-class-prefix($breakpoint-name, '.#{$sub-column-index}', false)} {
									width: (($breakpoint-column-width * $sub-column-index) / ($breakpoint-column-width * $column-index)) * 100%;
								}
							}
						//}
					}
				}
			}

			// Column (fraction)
			@if $rr-generate-grid-breakpoints-fraction {
				@for $denominator from 1 through $rr-grid-breakpoint-fraction-steps {
					@for $numerator from 1 through $denominator {
						$percent: 100% / $denominator * $numerator;

						// Offset
						#{grid-class-prefix($breakpoint-name, '.#{$rr-grid-offset-class-prefix}#{$numerator}\\/#{$denominator}', false)} {
							margin-left: $percent;
						}

						// Inset
						#{grid-class-prefix($breakpoint-name, '.#{$rr-grid-inset-class-prefix}#{$numerator}\\/#{$denominator}', false)} {
							margin-left: -($percent);
						}

						// Breakpoint
						#{grid-class-prefix($breakpoint-name, '.#{$numerator}\\/#{$denominator}', false)} {
							//&, .#{$rr-grid-row-class}.#{$rr-grid-row-reset-class} & {
								width: $percent;
							//}
						}
					}
				}
			}

			// Column (all) reset
			#{grid-class-prefix($breakpoint-name, '.#{$rr-grid-reset-class}', false)} {
				&, .#{$rr-grid-column-class} & {
					margin-left: 0;
				}
			}

			// Column (all) auto fill width
			.#{$rr-grid-column-class} {
				&#{grid-class-prefix($breakpoint-name, '.#{$rr-grid-column-auto-class}', true)} {
					flex: 1 1 0px;
				}

				&#{grid-class-prefix($breakpoint-name, '.#{$rr-grid-column-shrink-class}', true)} {
					flex: 0 0 auto;
					width: auto;
				}

				&#{grid-class-prefix($breakpoint-name, '.#{$rr-grid-column-normal-class}', true)} {
					flex: 0 0 auto;
				}
			}
		}
	}

	// Column force line break
	.#{$rr-grid-line-break-class} {
		flex: 1 1 100%;
		height: 0;
		width: auto;
		overflow: hidden;
	}
}

/**********************/
/* OUTPUT: GRIDHELPER */
/**********************/

@if $rr-generate-grid-helper {
	.#{$rr-grid-helper-info-class} {
		position: fixed;
		z-index: $rr-grid-helper-info-z-index;
		padding: $rr-grid-helper-info-padding;
		background-color: $rr-grid-helper-info-background-color;
		color: $rr-grid-helper-info-text-color;
		font-size: $rr-grid-helper-info-text-size;
		line-height: 1;

		@if is-number($rr-grid-helper-info-position-top) {
			top: $rr-grid-helper-info-position-top;
		}

		@if is-number($rr-grid-helper-info-position-right) {
			right: $rr-grid-helper-info-position-right;
		}

		@if is-number($rr-grid-helper-info-position-bottom) {
			bottom: $rr-grid-helper-info-position-bottom;
		}

		@if is-number($rr-grid-helper-info-position-left) {
			left: $rr-grid-helper-info-position-left;
		}

		span + input[type=checkbox] {
			margin: 0 !important;
			margin-left: $rr-grid-helper-info-padding !important;
			height: 1em !important;
			width: 1em !important;
		}
	}

	.#{$rr-grid-helper-grid-class} {
		display: none;
		position: fixed;
		z-index: $rr-grid-helper-z-index;
		top: 0;
		bottom: 0;
		width: 100%;
		overflow: hidden;
		pointer-events: none;

		.#{$rr-grid-row-class} {
			height: 100%;
			background-color: $rr-grid-helper-gutter-background-color;
		}

		.#{$rr-grid-column-class} {
			display: inline-block;
			height: 100%;

			div {
				height: 100%;
				background-color: $rr-grid-helper-column-background-color;
				border-left: 1px solid $rr-grid-helper-column-border-color;
				border-right: 1px solid $rr-grid-helper-column-border-color;
			}
		}
	}

	.#{$rr-grid-helper-grid-shower-class} {
		display: block;
	}
}

/////////////////////////
// APPEND GLOBAL SETTINGS
/////////////////////////

@if $rr-generate-grid-settings() {
	$grid-breakpoints: ();

	@each $breakpoint-key, $breakpoint-list in $rr-grid-breakpoints {
		$min-width-value: 0;
		$max-width-value: 0;

		@if $rr-grid-mobile-first {
			$min-width-value: if($breakpoint-key == nth(map-keys($rr-grid-breakpoints), 1), -1, grid-breakpoint-property($breakpoint-key, 'min-width'));
			$max-width-value: grid-calculate-max-width($breakpoint-key);
		} @else {
			$min-width-value: grid-calculate-min-width($breakpoint-key);
			$max-width-value: if($breakpoint-key == nth(map-keys($rr-grid-breakpoints), 1), -1, grid-breakpoint-property($breakpoint-key, 'max-width'));
		}

		$breakpoint-map: (
			$breakpoint-key: (
				name: $breakpoint-key,
				maxWidth: $max-width-value,
				minWidth: $min-width-value,
				columns: grid-breakpoint-property($breakpoint-key, 'columns'),
				gutter: grid-gutter($breakpoint-key)
			)
		);

		$grid-breakpoints: map-merge($grid-breakpoints, $breakpoint-map);
	}

	$grid-settings: (
		mobileFirst: $rr-grid-mobile-first,
		containerClass: $rr-grid-container-class,
		rowClass: $rr-grid-row-class,
		columnClass: $rr-grid-column-class,
		breakpoints: $grid-breakpoints,
		helper: (
			infoId: $rr-grid-helper-info-class,
			gridId: $rr-grid-helper-grid-class,
			gridShowerClass: $rr-grid-helper-grid-shower-class,

			show: $rr-grid-helper-show,
			gridShow: $rr-grid-helper-show-grid,
			breakpointShow: $rr-grid-helper-show-breakpoint
		)
	);

	$rr-global-settings: map-merge($rr-global-settings, ( grid: $grid-settings ) ) !global;
}

////////
// TODOS
////////

// PRIO 2: column widths on row optionally
// PRIO 2: better mq + pointer media queries in mq

// PRIO 3: collapse cells (remove gutter per bp) (on row)
// PRIO 3: remove unneeded output (reset on default bp etc.)
// PRIO 3: merge duplicate output

// https://medium.com/@ferie/detect-a-touch-device-with-only-css-9f8e30fa1134
// https://css-tricks.com/touch-devices-not-judged-size/
// https://codepen.io/andresgalante/pen/bBEJKg

// row cols:
// simple: .column.s:1, .row.s:1 > .column
// nested 1: .column.s:1 .column.s:1,
// nested 2: .row.s:1 > .column .row.s:1 > .column.s:1
// nested 3: .column.s:1 .row.s:1 > .column,
// nested 4: .row.s:1 > .column .column.s:1
