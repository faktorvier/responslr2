///////////////////
// DEFAULT SETTINGS
///////////////////

@use 'sass:meta';
@use 'sass:math';
@use 'sass:list';

@use '../utils';
@use '../core';

// Classes
$aspect-ratio-class-prefix: 'aspect-' !default;

// Default entries
$aspect-ratios: () !default;

// Default entry
$aspect-ratios-default: utils.map-default($aspect-ratios) !default;

// Output handling
$generate-aspect-ratios: core.$generate-classes !default;
$generate-aspect-ratios-unset: $generate-aspect-ratios !default;
$generate-aspect-ratios-breakpoints: core.$generate-breakpoint-classes !default;

///////////////////
// CLASS PROPERTIES
///////////////////

$aspect-ratio-class-properties: (
	position: relative
) !default;

$aspect-ratio-child-class-properties: (
	position: absolute,
	top: 0,
	left: 0,
	bottom: 0,
	right: 0
) !default;

$aspect-ratio-unset-class-properties: (
	position: unset,
	padding-top: unset,

	'> *': (
		position: unset,
		top: unset,
		left: unset,
		bottom: unset,
		right: unset
	)
) !default;

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function aspect-ratio-exists($name) {
	@return core.entry-exists($aspect-ratios, $name);
}

// Gets an entry by name
@function aspect-ratio-entry($name: null) {
	@return core.get-entry-by-name($aspect-ratios, $name, $aspect-ratios-default);
}

// Calculate aspect ratio
@function aspect-ratio-calculate($width, $height) {
	@return math.div($height, $width) * 100%;
}

// Get css properties by entry
@function aspect-ratio-entry-to-properties($entry, $breakpoint-name: '', $append-child: true, $apply-overwrites: true) {
	$value: core.get-value-by-entry($entry, 'ratio', $breakpoint-name, $apply-overwrites);
	$properties: ();

	@if $value == core.$unset-class {
		$properties: $aspect-ratio-unset-class-properties;
	} @else if utils.is-list($value) {
		$properties: utils.map-append(
			$aspect-ratio-class-properties,
			aspect-ratio-calculate(list.nth($value, 1), list.nth($value, 2)),
			padding-top
		);

		@if $append-child {
			$properties: utils.map-append(
				$properties,
				$aspect-ratio-child-class-properties,
				'> *'
			);
		}
	}

	@return $properties;
}

/////////
// MIXINS
/////////

// Output aspect ratio by name
@mixin aspect-ratio($name: null, $breakpoint-name: '', $append-child: true) {
	@include core.entry-output(
		aspect-ratio-entry($name),
		meta.get-function('aspect-ratio-entry-to-properties'),
		$breakpoint-name,
		$append-child
	);
}

// Output aspect ratio child
@mixin aspect-ratio-child() {
	@include core.generate-properties($aspect-ratio-child-class-properties);
}

// Output custom aspect ratio by width and height
@mixin aspect-ratio-custom($width, $height, $append-child: true) {
	@include core.generate-properties($aspect-ratio-class-properties);
	padding-top: aspect-ratio-calculate($width, $height);

	@if $append-child {
		> * {
			@include aspect-ratio-child();
		}
	}
}

// Output aspect ratio unset
@mixin aspect-ratio-unset($append-child: true) {
	@include core.generate-properties($aspect-ratio-unset-class-properties, not $append-child);
}

/////////
// OUTPUT
/////////

@mixin aspect-ratio-generate-output($breakpoint-prefix: '', $breakpoint-name: '', $apply-overwrites: false) {
	@if $generate-aspect-ratios {
		// Normal classes
		@if not core.is-default($breakpoint-name) or not $apply-overwrites {
			@each $aspect-ratio-name, $aspect-ratio-entry in $aspect-ratios {
				$generate-breakpoints: utils.map-maybe-get($aspect-ratio-entry, 'generate-breakpoints', $generate-aspect-ratios-breakpoints);

				@include core.generate-output-by-class(
					$class: $aspect-ratio-name,
					$prefix: $aspect-ratio-class-prefix,
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: aspect-ratio-entry-to-properties($aspect-ratio-entry, $breakpoint-name, true, $apply-overwrites),
					$append-prefix: $apply-overwrites,
					$generate-breakpoints: $generate-breakpoints
				);
			}
		}

		// Unset class
		@if core.is-default($breakpoint-name) or $apply-overwrites {
			@if $generate-aspect-ratios-unset and $breakpoint-prefix != '' {
				@include core.generate-output-by-class(
					$class: core.$unset-class,
					$prefix: $aspect-ratio-class-prefix,
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: $aspect-ratio-unset-class-properties,
					$append-prefix: $apply-overwrites
				);
			}
		}
	}
}
