///////////////////
// DEFAULT SETTINGS
///////////////////

// Classes
$rr-aspect-ratio-class-prefix: 'aspect-' !default;

// Default entries
$rr-aspect-ratios: () !default;

// Default entry
$rr-aspect-ratios-default: map-default($rr-aspect-ratios) !default;

// Output handling
$rr-generate-aspect-ratios: $rr-generate-classes !default;
$rr-generate-aspect-ratios-unset: $rr-generate-aspect-ratios !default;
$rr-generate-aspect-ratios-breakpoints: $rr-generate-breakpoint-classes !default;

///////////////////
// CLASS PROPERTIES
///////////////////

$rr-aspect-ratio-class-properties: (
	position: relative
) !default;

$rr-aspect-ratio-child-class-properties: (
	position: absolute,
	top: 0,
	left: 0,
	bottom: 0,
	right: 0
) !default;

$rr-aspect-ratio-unset-class-properties: (
	position: unset,
	padding-top: unset,

	'> *': (
		position: unset,
		top: unset,
		left: unset,
		bottom: unset,
		right: unset
	)
) !default;

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function aspect-ratio-exists($name) {
	@return entry-exists($rr-aspect-ratios, $name);
}

// Gets an entry by name
@function aspect-ratio-entry($name: null) {
	@return get-entry-by-name($rr-aspect-ratios, $name, $rr-aspect-ratios-default);
}

// Calculate aspect ratio
@function aspect-ratio-calculate($width, $height) {
	@return $height / $width * 100%;
}

// Get css properties by entry
@function aspect-ratio-entry-to-properties($entry, $breakpoint-name: '', $append-child: true) {
	$value: get-value-by-entry($entry, 'ratio', $breakpoint-name);
	$properties: ();

	@if $value == $rr-global-unset-class {
		$properties: $rr-aspect-ratio-unset-class-properties;
	} @else if is-list($value) {
		$properties: map-append(
			$rr-aspect-ratio-class-properties,
			aspect-ratio-calculate(nth($value, 1), nth($value, 2)),
			padding-top
		);

		@if $append-child {
			$properties: map-append(
				$properties,
				$rr-aspect-ratio-child-class-properties,
				'> *'
			);
		}
	}

	@return $properties;
}

/////////
// MIXINS
/////////

// Output aspect ratio by name
@mixin aspect-ratio($name: null, $breakpoint-name: '', $append-child: true) {
	@include entry-output(
		aspect-ratio-entry($name),
		'aspect-ratio-entry-to-properties',
		$breakpoint-name,
		$append-child
	);
}

// Output aspect ratio child
@mixin aspect-ratio-child() {
	@include generate-properties($rr-aspect-ratio-child-class-properties);
}

// Output custom aspect ratio by width and height
@mixin aspect-ratio-custom($width, $height, $append-child: true) {
	@include generate-properties($rr-aspect-ratio-class-properties);
	padding-top: aspect-ratio-calculate($width, $height);

	@if $append-child {
		> * {
			@include aspect-ratio-child();
		}
	}
}

// Output aspect ratio unset
@mixin aspect-ratio-unset($append-child: true) {
	@include generate-properties($rr-aspect-ratio-unset-class-properties, not $append-child);
}

/////////
// OUTPUT
/////////

@mixin generate-aspect-ratio-module-output($breakpoint-prefix: '', $breakpoint-name: '') {
	@if $rr-generate-aspect-ratios {
		// Normal classes
		@each $aspect-ratio-name, $aspect-ratio-entry in $rr-aspect-ratios {
			$generate-breakpoints: map-maybe-get($aspect-ratio-entry, 'generate-breakpoints', $rr-generate-aspect-ratios-breakpoints);

			@include generate-output-by-class(
				$class: $aspect-ratio-name,
				$prefix: $rr-aspect-ratio-class-prefix,
				$breakpoint-prefix: $breakpoint-prefix,
				$properties: aspect-ratio-entry-to-properties($aspect-ratio-entry, $breakpoint-name),
				$breakpoint-overwrites: entry-has-breakpoint-overwrite($aspect-ratio-entry, $breakpoint-name),
				$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
			);
		}

		// Unset class
		@if $rr-generate-aspect-ratios-unset and $breakpoint-prefix != '' {
			@include generate-output-by-class(
				$class: $rr-global-unset-class,
				$prefix: $rr-aspect-ratio-class-prefix,
				$breakpoint-prefix: $breakpoint-prefix,
				$properties: $rr-aspect-ratio-unset-class-properties,
				$generate-breakpoints: $breakpoint-prefix == '' or $rr-generate-aspect-ratios-breakpoints
			);
		}
	}
}
