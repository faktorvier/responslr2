///////////////////
// DEFAULT SETTINGS
///////////////////

// Classes
$rr-aspect-ratio-class-prefix: 'aspect-' !default;

// Aspect ratios
$rr-aspect-ratios: () !default;

// Defaults
$rr-aspect-ratio-map-defaults: (
	'ratio': null
) !default;

$rr-aspect-ratios-default: map-default($rr-aspect-ratios) !default;

// Print output for this module
$rr-generate-aspect-ratios: $rr-generate-classes !default;
$rr-generate-aspect-ratios-unset: $rr-generate-aspect-ratios !default;

///////////////////
// CLASS PROPERTIES
///////////////////

$rr-aspect-ratio-class-properties: (
	position: relative
) !default;

$rr-aspect-ratio-child-class-properties: (
	position: absolute,
	top: 0,
	left: 0,
	bottom: 0,
	right: 0
) !default;

$rr-aspect-ratio-unset-class-properties: (
	position: unset,
	padding-top: unset
) !default;

$rr-aspect-ratio-child-unset-class-properties: (
	position: unset,
	top: unset,
	left: unset,
	bottom: unset,
	right: unset
) !default;

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function aspect-ratio-exists($name) {
	@return entry-exists($rr-aspect-ratios, $name);
}

// Gets an entry by name
@function aspect-ratio-entry($name: null) {
	@return get-entry-by-name($rr-aspect-ratios, $name, $rr-aspect-ratios-default);
}

// Get an entry value by name
@function aspect-ratio-property($name, $property) {
	@return get-entry-property(
		$rr-aspect-ratios,
		$name,
		$property,
		$rr-aspect-ratio-map-defaults,
		$rr-aspect-ratios-default
	);
}

// Get value by name
@function aspect-ratio-value($name: null, $calculated: false) {
	$value: get-entry-value($rr-aspect-ratios, $name, 'ratio', $rr-aspect-ratios-default);

	@if $calculated {
		$value: aspect-ratio-calculate(nth($value, 1), nth($value, 2));
	}

	@return $value;
}

// Calculate aspect ratio
@function aspect-ratio-calculate($width, $height) {
	@return $height / $width * 100%;
}

/////////////////////
// INTERNAL FUNCTIONS
/////////////////////

// Convert entry to css properties map
@function aspect-ratio-to-css-properties($aspect-ratio) {
	// Set properties
	$return: map-merge(
		$rr-aspect-ratio-class-properties,
		(
			padding-top: aspect-ratio-value($aspect-ratio, true),
			'nested': (
				'> *': $rr-aspect-ratio-child-class-properties
			)
		)
	);

	// Append breakpoint overwrites if exists
	$return: append-entry-breakpoint-overwrites(
		$aspect-ratio,
		$return,
		'aspect-ratio-to-css-properties'
	);

	@return $return;
}

// Prepare map for property classes
@function aspect-ratio-property-classes() {
	$property-classes: ();

	// Append defined classes
	@each $class-name, $aspect-ratio in $rr-aspect-ratios {
		$property-classes: map-append(
			$property-classes,
			aspect-ratio-to-css-properties($aspect-ratio),
			$class-name
		);
	}

	// Append unset class
	@if not is-empty($property-classes) and $rr-generate-aspect-ratios-unset {
		$unset-property: map-append(
			$rr-aspect-ratio-unset-class-properties,
			$rr-aspect-ratio-child-unset-class-properties,
			(
				'> *': $rr-aspect-ratio-child-unset-class-properties
			)
			'nested'
		);

		$property-classes: map-append(
			$property-classes,
			$unset-property,
			$rr-global-unset-class
		);
	}

	@return $property-classes;
}

/////////
// MIXINS
/////////

// Output aspect ratio by name
@mixin aspect-ratio($name: null, $append-child: true) {
	$aspect-ratio: aspect-ratio-entry($name);

	@if is-not-null($aspect-ratio) {
		$ratio-value: $aspect-ratio;

		@if is-map($aspect-ratio) {
			$ratio-value: map-get($aspect-ratio, 'ratio');
		}

		@include aspect-ratio-custom(nth($ratio-value, 1), nth($ratio-value, 2), $append-child);
	}
}

@mixin aspect-ratio-custom($width, $height, $append-child: true) {
	padding-top: aspect-ratio-calculate($width, $height);
	@include generate-properties($rr-aspect-ratio-class-properties);

	@if $append-child {
		> * {
			@include aspect-ratio-child();
		}
	}
}

// Output aspect ratio child
@mixin aspect-ratio-child() {
	@include generate-properties($rr-aspect-ratio-child-class-properties);
}

// Output custom aspect ratio
@mixin aspect-ratio-unset($append-child: true) {
	@include generate-properties($rr-aspect-ratio-unset-class-properties);

	@if $append-child {
		> * {
			@include aspect-ratio-child-unset();
		}
	}
}

// Output aspect ratio child unset
@mixin aspect-ratio-child-unset() {
	@include generate-properties($rr-aspect-ratio-child-unset-class-properties);
}

/////////
// OUTPUT
/////////

@function aspect-ratio-entry-to-properties($entry, $breakpoint-name: '') {
	$properties: ();
	$value: get-value-by-entry($entry, 'ratio', $breakpoint-name);

	$properties: (
		position: relative,
		padding-top: aspect-ratio-calculate(nth($value, 1), nth($value, 2)),

		'> *': (
			position: absolute,
			top: 0,
			left: 0,
			bottom: 0,
			right: 0
		)
	);

	@return $properties;
}

@mixin generate-aspect-ratio-module-output($breakpoint-prefix: '', $breakpoint-name: '') {
	@if $rr-generate-aspect-ratios {
		// Normal classes
		@each $aspect-ratio-name, $aspect-ratio-entry in $rr-aspect-ratios {
			@include generate-output-by-class(
				$class: $aspect-ratio-name,
				$prefix: $rr-aspect-ratio-class-prefix,
				$breakpoint-prefix: $breakpoint-prefix,
				$properties: aspect-ratio-entry-to-properties($aspect-ratio-entry, $breakpoint-name),
				$breakpoint-overwrites: entry-has-breakpoint-overwrite($aspect-ratio-entry, $breakpoint-name)
			);
		}

		// Unset class
		@if $rr-generate-aspect-ratios-unset and $breakpoint-prefix != '' {
			@include generate-output-by-class(
				$class: $rr-global-unset-class,
				$prefix: $rr-aspect-ratio-class-prefix,
				$breakpoint-prefix: $breakpoint-prefix,
				$properties: (
					position: unset,
					padding-top: unset,

					'> *': (
						position: unset,
						top: unset,
						left: unset,
						bottom: unset,
						right: unset
					)
				)
			);
		}
	}
}
