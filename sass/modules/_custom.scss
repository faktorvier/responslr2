///////////////////
// DEFAULT SETTINGS
///////////////////

@use '../utilities' as *;

// Classes
$rr-custom-class-prefix: '' !default;

// Default entries
$rr-customs: () !default;

// Default entry
$rr-customs-default: map-default($rr-customs) !default;

// Output handling
$rr-generate-customs: $rr-generate-classes !default;

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function custom-exists($name) {
	@return entry-exists($rr-customs, $name);
}

// Gets an entry by name
@function custom-entry($name: null) {
	@return get-entry-by-name($rr-customs, $name, $rr-customs-default);
}

// Get css properties by entry
@function custom-entry-to-properties($entry, $breakpoint-name: '') {
	$properties: ();

	@if grid-is-default($breakpoint-name) {
		$properties: map-remove($entry, 'breakpoints');
	} @else {
		$breakpoint-overwrites: get-breakpoint-overwrite-by-entry($entry, $breakpoint-name);

		@if not is-null($breakpoint-overwrites) {
			$properties: $breakpoint-overwrites;
		}
	}

	@return $properties;
}

/////////
// MIXINS
/////////

// Output custom by name
@mixin custom($name: null, $breakpoint-name: '') {
	@include entry-output(
		custom-entry($name),
		'custom-entry-to-properties',
		$breakpoint-name
	);
}

/////////
// OUTPUT
/////////

@mixin generate-custom-module-output($breakpoint-prefix: '', $breakpoint-name: '') {
	@if $rr-generate-customs {
		@each $custom-name, $custom-entry in $rr-customs {
			@include generate-output-by-class(
				$class: $custom-name,
				$prefix: $rr-custom-class-prefix,
				$breakpoint-prefix: $breakpoint-prefix,
				$properties: custom-entry-to-properties($custom-entry, $breakpoint-name),
				//$breakpoint-overwrites: entry-has-breakpoint-overwrite($custom-entry, $breakpoint-name)
			);
		}
	}
}
