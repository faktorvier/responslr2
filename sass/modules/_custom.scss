///////////////////
// DEFAULT SETTINGS
///////////////////

@use 'sass:meta';
@use '../utilities' as utils;
@use '../core';

// Classes
$custom-class-prefix: '' !default;

// Default entries
$customs: () !default;

// Default entry
$customs-default: utils.map-default($customs) !default;

// Output handling
$generate-customs: core.$generate-classes !default;

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function custom-exists($name) {
	@return core.entry-exists($customs, $name);
}

// Gets an entry by name
@function custom-entry($name: null) {
	@return core.get-entry-by-name($customs, $name, $customs-default);
}

// Get css properties by entry
@function custom-entry-to-properties($entry, $breakpoint-name: '') {
	$properties: ();

	@if core.is-default($breakpoint-name) {
		$properties: map-remove($entry, 'breakpoints');
	} @else {
		$breakpoint-overwrites: core.get-breakpoint-overwrite-by-entry($entry, $breakpoint-name);

		@if not utils.is-null($breakpoint-overwrites) {
			$properties: $breakpoint-overwrites;
		}
	}

	@return $properties;
}

/////////
// MIXINS
/////////

// Output custom by name
@mixin custom($name: null, $breakpoint-name: '') {
	@include core.entry-output(
		custom-entry($name),
		meta.get-function('custom-entry-to-properties'),
		$breakpoint-name
	);
}

/////////
// OUTPUT
/////////

@mixin generate-custom-module-output($breakpoint-prefix: '', $breakpoint-name: '') {
	@if $generate-customs {
		@each $custom-name, $custom-entry in $customs {
			@include core.generate-output-by-class(
				$class: $custom-name,
				$prefix: $custom-class-prefix,
				$breakpoint-prefix: $breakpoint-prefix,
				$properties: custom-entry-to-properties($custom-entry, $breakpoint-name),
				//$breakpoint-overwrites: core.entry-has-breakpoint-overwrite($custom-entry, $breakpoint-name)
			);
		}
	}
}
