///////////////////
// DEFAULT SETTINGS
///////////////////

// Classes
$rr-font-size-class-prefix: 'txt-size-' !default;

// Font sizes
$rr-font-sizes: () !default;

// Defaults
$rr-font-size-map-defaults: (
	'size': null,
	'line-height': unset,
	'letter-spacing': unset
) !default;

$rr-font-sizes-default: map-default($rr-font-sizes) !default;

// Print output for this module
$rr-generate-font-sizes: $rr-generate-classes !default;
$rr-generate-font-sizes-unset: $rr-generate-font-sizes !default;

///////////////////
// CLASS PROPERTIES
///////////////////

$rr-font-size-unset-class-properties: (
	font-size: unset,
	line-height: unset
) !default;

////////////
// FUNCTIONS
////////////

// Check if a font size exists
@function font-size-exists($name) {
	@return entry-exists($rr-font-sizes, $name);
}

// Gets a font size by name
@function font-size-entry($name: null) {
	@return get-entry-by-name($rr-font-sizes, $name, $rr-font-sizes-default);
}

// Get a font size property value by name
@function font-size-property($name, $property) {
	@return get-entry-property(
		$rr-font-sizes,
		$name,
		$property,
		$rr-font-size-map-defaults,
		$rr-font-sizes-default
	);
}

// Get a font size value by name
@function font-size-value($name: null) {
	@return get-entry-value($rr-font-sizes, $name, 'size', $rr-font-sizes-default);
}

// Get font size css properties by name
@function font-size-css-properties-by-name($font-size) {
	$return: (
		font-size: list-comma(font-size-value($font-size)),
		line-height: font-size-property($font-size, 'line-height'),
		letter-spacing: font-size-property($font-size, 'letter-spacing')
	);

	@return $return;
}

// Convert font size entry to css properties map
@function font-size-to-css-properties($font-size) {
	// Get properties
	$return: font-size-css-properties-by-name($font-size);

	// Append breakpoint overwrites if exists
	$return: append-entry-breakpoint-overwrites(
		$font-size,
		$return,
		'font-size-to-css-properties'
	);

	@return $return;
}

// Prepare font size map for property classes
@function font-size-property-classes() {
	$property-classes: ();

	// Append defined classes
	@each $class-name, $font-size in $rr-font-sizes {
		$property-classes: map-append(
			$property-classes,
			font-size-to-css-properties($font-size),
			$class-name
		);
	}

	// Append unset class
	@if $rr-generate-font-sizes-unset {
		$property-classes: map-append(
			$property-classes,
			$rr-font-size-unset-class-properties,
			$rr-global-unset-class
		);
	}

	@return $property-classes;
}

/////////
// MIXINS
/////////

// Output font size by name
@mixin font-size($name: null) {
	@include generate-properties(
		font-size-css-properties-by-name($name)
	);
}

/////////
// OUTPUT
/////////

@if $rr-generate-font-sizes and map-not-empty($rr-font-sizes) {
	@include add-breakpoint-classes-custom(
		$classes: font-size-property-classes(),
		$class-prefix: $rr-font-size-class-prefix,
		$ignore-breakpoints: false
	);
}

@if $rr-generate-font-transform {
	@include add-breakpoint-classes-simple(
		$property-name: 'text-transform',
		$class-prefix: $rr-font-transform-class-prefix,
		$values: $rr-font-transform-properties
	);
}

