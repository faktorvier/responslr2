///////////////////
// DEFAULT SETTINGS
///////////////////

@use '../utils';
@use '../core';

// Classes
$transition-class-prefix: 'transition-' !default;

// Default values
$transitions-default-duration: 0.25s !default;
$transitions-default-delay: null !default;
$transitions-default-timing-function: null !default;
$transitions-default-hardware-acceleration: true !default;

// Default entries
$transitions: () !default;

// Default entry
$transitions-default: utils.map-default($transitions) !default;

// Output handling
$generate-transitions: core.$generate-classes !default;

///////////////////
// CLASS PROPERTIES
///////////////////

$transition-hardware-acceleration-class-properties: (
	transform: translateZ(0)
) !default;

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function transition-exists($name) {
	@return core.entry-exists($transitions, $name);
}

// Gets an entry by name
@function transition-entry($name: null) {
	@return core.get-entry-by-name($transitions, $name, $transitions-default);
}

// Get timing function by name
@function transition-timing-function-by-name($names) {
	$timing-function: ();

	@each $name in $names {
		@if utils.is-not-null($name) {
			@if $name == 'easeInQuad' {
				$timing-function: append($timing-function, cubic-bezier(0.550, 0.085, 0.680, 0.530));
			} @else if $name == 'easeInCubic' {
				$timing-function: append($timing-function, cubic-bezier(0.550, 0.055, 0.675, 0.190));
			} @else if $name == 'easeInQuart' {
				$timing-function: append($timing-function, cubic-bezier(0.895, 0.030, 0.685, 0.220));
			} @else if $name == 'easeInQuint' {
				$timing-function: append($timing-function, cubic-bezier(0.755, 0.050, 0.855, 0.060));
			} @else if $name == 'easeInSine' {
				$timing-function: append($timing-function, cubic-bezier(0.470, 0.000, 0.745, 0.715));
			} @else if $name == 'easeInExpo' {
				$timing-function: append($timing-function, cubic-bezier(0.950, 0.050, 0.795, 0.035));
			} @else if $name == 'easeInCirc' {
				$timing-function: append($timing-function, cubic-bezier(0.600, 0.040, 0.980, 0.335));
			} @else if $name == 'easeInBack' {
				$timing-function: append($timing-function, cubic-bezier(0.600, -0.280, 0.735, 0.045));
			} @else if $name == 'easeOutQuad' {
				$timing-function: append($timing-function, cubic-bezier(0.250, 0.460, 0.450, 0.940));
			} @else if $name == 'easeOutCubic' {
				$timing-function: append($timing-function, cubic-bezier(0.215, 0.610, 0.355, 1.000));
			} @else if $name == 'easeOutQuart' {
				$timing-function: append($timing-function, cubic-bezier(0.165, 0.840, 0.440, 1.000));
			} @else if $name == 'easeOutQuint' {
				$timing-function: append($timing-function, cubic-bezier(0.230, 1.000, 0.320, 1.000));
			} @else if $name == 'easeOutSine' {
				$timing-function: append($timing-function, cubic-bezier(0.390, 0.575, 0.565, 1.000));
			} @else if $name == 'easeOutExpo' {
				$timing-function: append($timing-function, cubic-bezier(0.190, 1.000, 0.220, 1.000));
			} @else if $name == 'easeOutCirc' {
				$timing-function: append($timing-function, cubic-bezier(0.075, 0.820, 0.165, 1.000));
			} @else if $name == 'easeOutBack' {
				$timing-function: append($timing-function, cubic-bezier(0.175, 0.885, 0.320, 1.275));
			} @else if $name == 'easeInOutQuad' {
				$timing-function: append($timing-function, cubic-bezier(0.455, 0.030, 0.515, 0.955));
			} @else if $name == 'easeInOutCubic' {
				$timing-function: append($timing-function, cubic-bezier(0.645, 0.045, 0.355, 1.000));
			} @else if $name == 'easeInOutQuart' {
				$timing-function: append($timing-function, cubic-bezier(0.770, 0.000, 0.175, 1.000));
			} @else if $name == 'easeInOutQuint' {
				$timing-function: append($timing-function, cubic-bezier(0.860, 0.000, 0.070, 1.000));
			} @else if $name == 'easeInOutSine' {
				$timing-function: append($timing-function, cubic-bezier(0.445, 0.050, 0.550, 0.950));
			} @else if $name == 'easeInOutExpo' {
				$timing-function: append($timing-function, cubic-bezier(1.000, 0.000, 0.000, 1.000));
			} @else if $name == 'easeInOutCirc' {
				$timing-function: append($timing-function, cubic-bezier(0.785, 0.135, 0.150, 0.860));
			} @else if $name == 'easeInOutBack' {
				$timing-function: append($timing-function, cubic-bezier(0.680, -0.550, 0.265, 1.550));
			} @else {
				$timing-function: append($timing-function, $name);
			}
		} @else {
			$timing-function: null;
		}
	}

	@return $timing-function;
}

// Get css properties by entry
@function transition-entry-to-properties($entry) {
	$transition-property: core.get-value-by-entry($entry, 'property');
	$transition-duration: utils.map-maybe-get($entry, 'duration', $transitions-default-duration);
	$transition-delay: utils.map-maybe-get($entry, 'delay', $transitions-default-delay);
	$transition-timing-function: utils.map-maybe-get($entry, 'timing-function', $transitions-default-timing-function);
	$transition-hardware-acceleration: utils.map-maybe-get($entry, 'hardware-acceleration', $transitions-default-hardware-acceleration);

	$properties: ();

	@if length($transition-property) == 1 {
		@if utils.is-null($transition-delay) {
			$transition-delay: 0s;
		}

		@if utils.is-null($transition-timing-function) {
			$transition-timing-function: ease;
		}

		$properties: (
			transition: #{$transition-property} #{$transition-duration} #{$transition-timing-function} #{$transition-delay}
		);
	} @else {
		$properties: (
			transition-property: utils.list-comma($transition-property),
			transition-duration: utils.list-comma($transition-duration),
			transition-delay: utils.list-comma($transition-delay),
			transition-timing-function: utils.list-comma(transition-timing-function-by-name($transition-timing-function))
		);
	}

	@if $transition-hardware-acceleration {
		$properties: map-merge($properties, $transition-hardware-acceleration-class-properties);
	}

	@return $properties;
}

/////////
// MIXINS
/////////

// Output transition by name
@mixin transition($name: null, $hardware-acceleration: null) {
	$entry: transition-entry($name);

	@if utils.is-not-null($entry) {
		@if utils.is-not-null($hardware-acceleration) {
			$entry: map-merge($entry, ('hardware-acceleration': $hardware-acceleration));
		}

		$properties: transition-entry-to-properties($entry);
		@include core.generate-properties($properties);
	}
}

// Output transition hardware acceleration
@mixin transition-hardware-acceleration() {
	@include core.generate-properties($transition-hardware-acceleration-class-properties);
}

/////////
// OUTPUT
/////////

@mixin transition-generate-output($breakpoint-prefix: '', $breakpoint-name: '') {
	@if $generate-transitions and core.is-default($breakpoint-prefix) {
		@each $transition-name, $transition-entry in $transitions {
			@include core.generate-output-by-class(
				$class: $transition-name,
				$prefix: $transition-class-prefix,
				$breakpoint-prefix: $breakpoint-prefix,
				$properties: transition-entry-to-properties($transition-entry)
			);
		}
	}
}
