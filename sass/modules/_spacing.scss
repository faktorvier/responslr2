///////////////////
// DEFAULT SETTINGS
///////////////////

// Classes
$rr-spacing-class-prefix: '' !default;

// Default entries
$rr-spacings: () !default;

// Default entry
$rr-spacings-default: map-default($rr-spacings) !default;

// Output handling
$rr-generate-spacings: $rr-generate-classes !default;
$rr-generate-spacings-margin: $rr-generate-spacings !default;
$rr-generate-spacings-padding: $rr-generate-spacings !default;
$rr-generate-spacings-gutter: $rr-generate-spacings !default;
$rr-generate-spacings-auto: $rr-generate-spacings !default;
$rr-generate-spacings-unset: $rr-generate-spacings !default;
$rr-generate-spacings-breakpoints: $rr-generate-breakpoint-classes !default;

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function spacing-exists($name) {
	@return entry-exists($rr-spacings, $name);
}

// Gets an entry by name
@function spacing-entry($name: null) {
	@return get-entry-by-name($rr-spacings, $name, $rr-spacings-default);
}

// Get spacing properties by type
@function spacing-properties-by-type($spacing-value, $type) {
	$spacing-properties: ();

	@if is-not-null($spacing-value) {
		@if $type == 'mt' {
			$spacing-properties: (
				margin-top: $spacing-value
			);
		} @else if $type == 'mr' {
			$spacing-properties: (
				margin-right: $spacing-value
			);
		} @else if $type == 'mb' {
			$spacing-properties: (
				margin-bottom: $spacing-value
			);
		} @else if $type == 'ml' {
			$spacing-properties: (
				margin-left: $spacing-value
			);
		} @else if $type == 'my' {
			$spacing-properties: (
				margin-top: $spacing-value,
				margin-bottom: $spacing-value
			);
		} @else if $type == 'mx' {
			$spacing-properties: (
				margin-left: $spacing-value,
				margin-right: $spacing-value
			);
		} @else if $type == 'ma' {
			$spacing-properties: (
				margin: $spacing-value
			);
		} @else if $type == 'pt' {
			$spacing-properties: (
				padding-top: $spacing-value
			);
		} @else if $type == 'pr' {
			$spacing-properties: (
				padding-right: $spacing-value
			);
		} @else if $type == 'pb' {
			$spacing-properties: (
				padding-bottom: $spacing-value
			);
		} @else if $type == 'pl' {
			$spacing-properties: (
				padding-left: $spacing-value
			);
		} @else if $type == 'py' {
			$spacing-properties: (
				padding-top: $spacing-value,
				padding-bottom: $spacing-value
			);
		} @else if $type == 'px' {
			$spacing-properties: (
				padding-left: $spacing-value,
				padding-right: $spacing-value
			);
		}  @else if $type == 'pa' {
			$spacing-properties: (
				padding: $spacing-value
			);
		}
	}

	@return $spacing-properties;
}

// Get css properties by entry
@function spacing-entry-to-properties($entry, $breakpoint-name: '', $type: 'ma') {
	$value: get-value-by-entry($entry, 'spacing', $breakpoint-name);
	$properties: spacing-properties-by-type($value, $type);

	@return $properties;
}

/////////
// MIXINS
/////////

// Output spacing by name
@mixin spacing($name: null, $type: 'ma', $breakpoint-name: '') {
	$entry: null;

	@if $name == $rr-global-unset-class {
		$entry: $name;
	} @else if $name == $rr-global-auto-class {
		$entry: (
			'spacing': auto,
			'generate-padding': false
		);
	}  @else if $name == 'gutter' {
		$entry: grid-gutter($breakpoint-name);
	} @else {
		$entry: spacing-entry($name);
	}

	@include entry-output(
		$entry,
		'spacing-entry-to-properties',
		$breakpoint-name,
		$type
	);
}

/////////
// OUTPUT
/////////

@mixin generate-spacing-module-output($breakpoint-prefix, $breakpoint-name: '') {
	@if $rr-generate-spacings {
		$rr-spacings-new: $rr-spacings;

		// Append gutter spacing
		$gutters: ();

		@each $breakpoint-name, $breakpoint in $rr-grid-breakpoints {
			@if not grid-is-default($breakpoint-name) {
				$gutters: map-append($gutters, grid-gutter($breakpoint-name), $breakpoint-name);
			}
		}

		@if $rr-generate-spacings-gutter {
			$rr-spacings-new: map-append(
				$rr-spacings-new,
				(
					'spacing': grid-gutter($breakpoint-name),
					'breakpoints': $gutters
				),
				$rr-global-gutter-class
			);
		}

		// Append auto spacing
		@if $rr-generate-spacings-auto {
			$rr-spacings-new: map-append(
				$rr-spacings-new,
				(
					'spacing': auto,
					'generate-padding': false
				),
				$rr-global-auto-class
			);
		}

		// Append spacing unset
		@if $rr-generate-spacings-unset {
			$rr-spacings-new: map-append(
				$rr-spacings-new,
				unset,
				$rr-global-unset-class
			);
		}

		@each $spacing-name, $spacing-entry in $rr-spacings-new {
			$spacing-value: get-value-by-entry($spacing-entry, 'spacing', $breakpoint-name);

			$generate-margin: map-maybe-get($spacing-entry, 'generate-margin', $rr-generate-spacings-margin);
			$generate-padding: map-maybe-get($spacing-entry, 'generate-padding', $rr-generate-spacings-padding);
			$generate-breakpoints: map-maybe-get($spacing-entry, 'generate-breakpoints', $rr-generate-spacings-breakpoints);

			$breakpoint-overwrites: entry-has-breakpoint-overwrite($spacing-entry, $breakpoint-name);

			@if $generate-margin {
				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'mt-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (margin-top: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);

				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'mr-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (margin-right: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);

				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'mb-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (margin-bottom: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);

				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'ml-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (margin-left: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);

				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'my-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (margin-top: $spacing-value, margin-bottom: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);

				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'mx-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (margin-left: $spacing-value, margin-right: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);

				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'ma-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (margin: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);
			}

			@if $generate-padding {
				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'pt-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (padding-top: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);

				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'pr-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (padding-right: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);

				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'pb-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (padding-bottom: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);

				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'pl-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (padding-left: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);

				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'py-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (padding-top: $spacing-value, padding-bottom: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);

				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'px-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (padding-left: $spacing-value, padding-right: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);

				@include generate-output-by-class(
					$class: $spacing-name,
					$prefix: 'pa-',
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (padding: $spacing-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);
			}
		}
	}
}
