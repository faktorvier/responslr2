///////////////////
// DEFAULT SETTINGS
///////////////////

@use 'sass:meta';
@use '../utils';
@use '../core';

// Classes
$spacing-class-prefix: '' !default;
$spacing-container-spacing-class: 'container-spacing' !default;
$spacing-container-outer-class: 'container-outer' !default;

// Default entries
$spacings: () !default;

// Default entry
$spacings-default: utils.map-default($spacings) !default;

// Output handling
$generate-spacings: core.$generate-classes !default;
$generate-spacings-margin: $generate-spacings !default;
$generate-spacings-padding: $generate-spacings !default;
$generate-spacings-gutter: $generate-spacings !default;
$generate-spacings-container: $generate-spacings !default;
$generate-spacings-auto: $generate-spacings !default;
$generate-spacings-unset: $generate-spacings !default;
$generate-spacings-breakpoints: core.$generate-breakpoint-classes !default;

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function spacing-exists($name) {
	@return core.entry-exists($spacings, $name);
}

// Gets an entry by name
@function spacing-entry($name: null) {
	@return core.get-entry-by-name($spacings, $name, $spacings-default);
}

// Get spacing properties by type
@function spacing-properties-by-type($spacing-value, $type) {
	$spacing-properties: ();

	@if utils.is-not-null($spacing-value) {
		@if $type == 'mt' {
			$spacing-properties: (
				margin-top: $spacing-value
			);
		} @else if $type == 'mr' {
			$spacing-properties: (
				margin-right: $spacing-value
			);
		} @else if $type == 'mb' {
			$spacing-properties: (
				margin-bottom: $spacing-value
			);
		} @else if $type == 'ml' {
			$spacing-properties: (
				margin-left: $spacing-value
			);
		} @else if $type == 'my' {
			$spacing-properties: (
				margin-top: $spacing-value,
				margin-bottom: $spacing-value
			);
		} @else if $type == 'mx' {
			$spacing-properties: (
				margin-left: $spacing-value,
				margin-right: $spacing-value
			);
		} @else if $type == 'ma' {
			$spacing-properties: (
				margin: $spacing-value
			);
		} @else if $type == 'pt' {
			$spacing-properties: (
				padding-top: $spacing-value
			);
		} @else if $type == 'pr' {
			$spacing-properties: (
				padding-right: $spacing-value
			);
		} @else if $type == 'pb' {
			$spacing-properties: (
				padding-bottom: $spacing-value
			);
		} @else if $type == 'pl' {
			$spacing-properties: (
				padding-left: $spacing-value
			);
		} @else if $type == 'py' {
			$spacing-properties: (
				padding-top: $spacing-value,
				padding-bottom: $spacing-value
			);
		} @else if $type == 'px' {
			$spacing-properties: (
				padding-left: $spacing-value,
				padding-right: $spacing-value
			);
		}  @else if $type == 'pa' {
			$spacing-properties: (
				padding: $spacing-value
			);
		}
	}

	@return $spacing-properties;
}

// Get css properties by entry
@function spacing-entry-to-properties($entry, $breakpoint-name: '', $type: 'ma') {
	$value: core.get-value-by-entry($entry, 'spacing', $breakpoint-name);
	$properties: spacing-properties-by-type($value, $type);

	@return $properties;
}

// Get container spacing (without gutter)
@function spacing-container($breakpoint-name: '') {
	@return core.breakpoint-property($breakpoint-name, 'container-spacing');
}

// Get container spacing (with gutter)
@function spacing-container-outer($breakpoint-name: '') {
	@return core.gutter-half($breakpoint-name) + core.breakpoint-property($breakpoint-name, 'container-spacing');
}

/////////
// MIXINS
/////////

// Output spacing by name
@mixin spacing($name: null, $type: 'ma', $breakpoint-name: '') {
	$entry: null;

	@if $name == core.$unset-class {
		$entry: unset;
	} @else if $name == core.$auto-class {
		$entry: (
			'spacing': auto,
			'generate-padding': false
		);
	} @else if $name == 'gutter' {
		$entry: core.gutter($breakpoint-name);
	} @else if $name == 'gutter-half' {
		$entry: core.gutter-half($breakpoint-name);
	} @else {
		$entry: spacing-entry($name);
	}

	@include core.entry-output(
		$entry,
		meta.get-function('spacing-entry-to-properties'),
		$breakpoint-name,
		$type
	);
}

/////////
// OUTPUT
/////////

@mixin spacing-generate-output($breakpoint-prefix, $breakpoint-name: '', $apply-overwrites: false) {
	@if $generate-spacings {
		$spacings-new: $spacings;

		// Append gutter spacing
		$gutters: ();
		$gutters-half: ();
		$container-spacings: ();
		$container-gutters: ();

		@each $breakpoint-name-loop, $breakpoint in core.$breakpoints {
			@if not core.is-default($breakpoint-name-loop) {
				$gutter: core.gutter($breakpoint-name-loop);
				$gutter-half: core.gutter-half($breakpoint-name-loop);
				$container-spacing: core.breakpoint-property($breakpoint-name-loop, 'container-spacing');

				$gutters: utils.map-append($gutters, $gutter, $breakpoint-name-loop);
				$gutters-half: utils.map-append($gutters-half, $gutter-half, $breakpoint-name-loop);
				$container-spacings: utils.map-append($container-spacings, $container-spacing, $breakpoint-name-loop);
				$container-gutters: utils.map-append($container-gutters, ($gutter * 0.5) + $container-spacing, $breakpoint-name-loop);
			}
		}

		// Append gutter spacings
		@if $generate-spacings-gutter {
			$spacings-new: utils.map-append(
				$spacings-new,
				(
					'spacing': core.gutter($breakpoint-name),
					'breakpoints': $gutters
				),
				core.$gutter-class
			);

			$spacings-new: utils.map-append(
				$spacings-new,
				(
					'spacing': core.gutter-half($breakpoint-name),
					'breakpoints': $gutters-half
				),
				core.$gutter-class + '-half'
			);
		}

		// Append container spacing
		@if $generate-spacings-container {
			$spacings-new: utils.map-append(
				$spacings-new,
				(
					'spacing': core.breakpoint-property($breakpoint-name, 'container-spacing'),
					'breakpoints': $container-spacings
				),
				$spacing-container-spacing-class
			);

			$spacings-new: utils.map-append(
				$spacings-new,
				(
					'spacing': core.gutter-half($breakpoint-name) + core.breakpoint-property($breakpoint-name, 'container-spacing'),
					'breakpoints': $container-gutters
				),
				$spacing-container-outer-class
			);
		}

		// Append auto spacing
		@if $generate-spacings-auto {
			$spacings-new: utils.map-append(
				$spacings-new,
				(
					'spacing': auto,
					'generate-padding': false
				),
				core.$auto-class
			);
		}

		// Append spacing unset
		@if $generate-spacings-unset {
			$spacings-new: utils.map-append(
				$spacings-new,
				unset,
				core.$unset-class
			);
		}

		@if not core.is-default($breakpoint-name) or not $apply-overwrites {
			@each $spacing-name, $spacing-entry in $spacings-new {
				$spacing-value: core.get-value-by-entry($spacing-entry, 'spacing', $breakpoint-name, $apply-overwrites);

				$generate-margin: utils.map-maybe-get($spacing-entry, 'generate-margin', $generate-spacings-margin);
				$generate-padding: utils.map-maybe-get($spacing-entry, 'generate-padding', $generate-spacings-padding);
				$generate-breakpoints: utils.map-maybe-get($spacing-entry, 'generate-breakpoints', $generate-spacings-breakpoints);

				@if $generate-margin {
					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'ma-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (margin: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);

					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'my-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (margin-top: $spacing-value, margin-bottom: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);

					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'mx-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (margin-left: $spacing-value, margin-right: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);

					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'mt-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (margin-top: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);

					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'mr-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (margin-right: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);

					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'mb-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (margin-bottom: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);

					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'ml-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (margin-left: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);
				}

				@if $generate-padding {
					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'pa-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (padding: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);

					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'py-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (padding-top: $spacing-value, padding-bottom: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);

					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'px-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (padding-left: $spacing-value, padding-right: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);

					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'pt-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (padding-top: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);

					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'pr-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (padding-right: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);

					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'pb-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (padding-bottom: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);

					@include core.generate-output-by-class(
						$class: $spacing-name,
						$prefix: 'pl-',
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (padding-left: $spacing-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);
				}
			}
		}
	}
}
