///////////////////
// DEFAULT SETTINGS
///////////////////
@use 'sass:meta';
@use 'sass:map';
@use 'sass:list';
@use 'sass:string';

@use '../utilities' as utils;
@use '../core';

// Classes
$font-family-class-prefix: 'font-' !default;

// Default values
$font-family-default-file-types: ('woff2');
$font-family-default-weight: normal !default;
$font-family-default-style: normal !default;
$font-family-default-letter-spacing: unset !default;

// Default entries
$font-families: () !default;

// Default entry
$font-families-default: utils.map-default($font-families) !default;

// Output handling
$generate-font-families: core.$generate-classes !default;
$generate-font-families-breakpoints: core.$generate-breakpoint-classes !default;

////////////
// FUNCTIONS
////////////

// Check if a font family exists
@function font-family-exists($name) {
	@return core.entry-exists($font-families, $name);
}

// Gets a font family by name
@function font-family-entry($name: null) {
	@return core.get-entry-by-name($font-families, $name, $font-families-default);
}

// Get css properties by entry
@function font-family-entry-to-properties($entry, $breakpoint-name: '', $apply-overwrites: true) {
	$family: core.get-value-by-entry($entry, 'family', $breakpoint-name, $apply-overwrites);
	$properties: ();

	@if utils.is-not-null($family) {
		$properties: (
			font-family: utils.list-comma($family),
			font-weight: core.get-property-by-entry($entry, 'weight', $font-family-default-weight, $breakpoint-name, $apply-overwrites),
			font-style: core.get-property-by-entry($entry, 'style', $font-family-default-style, $breakpoint-name, $apply-overwrites),
			letter-spacing: core.get-property-by-entry($entry, 'letter-spacing', $font-family-default-letter-spacing, $breakpoint-name, $apply-overwrites)
		);
	}

	@return $properties;
}

/////////
// MIXINS
/////////

// Output font family by name
@mixin font-family($name: null, $breakpoint-name: '') {
	@include core.entry-output(
		font-family-entry($name),
		meta.get-function('font-family-entry-to-properties'),
		$breakpoint-name
	);
}

/////////
// OUTPUT
/////////

@mixin generate-font-family-module-output($breakpoint-prefix: '', $breakpoint-name: '', $apply-overwrites: false) {
	@if $generate-font-families {
		// Font faces
		@if core.is-default($breakpoint-prefix) and not $apply-overwrites {
			@each $class-name, $font in $font-families {
				@if utils.is-map($font) and map.has-key($font, 'face') {
					$font-face: core.get-property-by-entry($font, 'face', null);
					$font-family: list.nth($font-face, 2);
					$font-file: list.nth($font-face, 1);
					$font-src: ();

					@each $file-type in $font-family-default-file-types {
						$font-src: list.append($font-src, url(string.quote($font-file + '.' + $file-type)) format(string.quote($file-type)), $separator: 'comma');
					}

					$properties: (
						font-family: $font-family,
						src: $font-src,
						font-weight: core.get-property-by-entry($font, 'weight', $font-family-default-weight),
						font-style: core.get-property-by-entry($font, 'style', $font-family-default-style)
					);

					@font-face {
						@include core.generate-properties($properties);
					}
				}
			}
		}

		// Font families
		@if not core.is-default($breakpoint-name) or not $apply-overwrites {
			@each $font-family-name, $font-family-entry in $font-families {
				$generate-breakpoints: utils.map-maybe-get($font-family-entry, 'generate-breakpoints', $generate-font-families-breakpoints);

				@include core.generate-output-by-class(
					$class: $font-family-name,
					$prefix: $font-family-class-prefix,
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: font-family-entry-to-properties($font-family-entry, $breakpoint-name, $apply-overwrites),
					$append-prefix: $apply-overwrites,
					$generate-breakpoints: $generate-breakpoints
				);
			}
		}
	}
}
