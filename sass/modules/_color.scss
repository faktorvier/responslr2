///////////////////
// DEFAULT SETTINGS
///////////////////

@use 'sass:meta';
@use '../utilities' as utils;
@use '../core';

// Classes
$color-text-class-prefix: 'color-' !default;
$color-background-class-prefix: 'bg-color-' !default;
$color-border-class-prefix: 'border-color-' !default;
$color-currentcolor-class: 'current' !default;

// Default entries
$colors: () !default;

// Default entry
$colors-default: utils.map-default($colors) !default;

// Output handling
$generate-colors: core.$generate-classes !default;
$generate-colors-text: $generate-colors !default;
$generate-colors-background: $generate-colors !default;
$generate-colors-border: $generate-colors !default;
$generate-colors-unset: $generate-colors !default;
$generate-colors-currentcolor: $generate-colors !default;
$generate-colors-breakpoints: core.$generate-breakpoint-classes !default;

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function color-exists($name) {
	@return core.entry-exists($colors, $name);
}

// Gets an entry by name
@function color-entry($name: null) {
	@return core.get-entry-by-name($colors, $name, $colors-default);
}

// Get property name by type
@function color-property-by-type($type) {
	$property-name: color;

	@if $type == 'background' {
		$property-name: background-color;
	} @else if $type == 'border' {
		$property-name: border-color;
	}

	@return $property-name;
}

// Get css properties by entry
@function color-entry-to-properties($entry, $breakpoint-name: '', $type: 'text') {
	$property: color;

	@if $type == 'background' {
		$property: background-color;
	} @else if $type == 'border' {
		$property: border-color;
	} @else if $type == 'border-top' {
		$property: border-top-color;
	} @else if $type == 'border-right' {
		$property: border-right-color;
	} @else if $type == 'border-bottom' {
		$property: border-bottom-color;
	} @else if $type == 'border-left' {
		$property: border-left-color;
	}

	$color: core.get-value-by-entry($entry, 'color', $breakpoint-name);

	@if $type == 'background' {
		$color: core.get-property-by-entry($entry, 'color-bg', $color, $breakpoint-name);
	} @else if $type == 'border' {
		$color: core.get-property-by-entry($entry, 'color-border', $color, $breakpoint-name);
	}

	$properties: (
		$property: $color
	);

	@return $properties;
}

@function color-entry-to-border-shorthand($entry, $breakpoint-name: '', $shorthand: '', $direction: null) {
	$color: core.get-value-by-entry($entry, 'color', $breakpoint-name);
	$color: core.get-property-by-entry($entry, 'color-border', $color, $breakpoint-name);

	$property: border;

	@if $direction == 'top' {
		$property: border-top;
	} @else if $direction == 'right' {
		$property: border-right;
	} @else if $direction == 'bottom' {
		$property: border-bottom;
	} @else if $direction == 'left' {
		$property: border-left;
	}

	$properties: (
		$property: #{$shorthand} #{$color}
	);

	@return $properties;
}

// Get color by name
@function color($name, $type: 'text', $breakpoint-name: '') {
	$entry: color-entry($name);
	$color: null;

	@if($entry) {
		$color: core.get-value-by-entry($entry, 'color', $breakpoint-name);

		@if $type == 'background' or $type == 'bg' {
			$color: core.get-property-by-entry($entry, 'color-bg', $color, $breakpoint-name);
		} @else if $type == 'border' {
			$color: core.get-property-by-entry($entry, 'color-border', $color, $breakpoint-name);
		}
	}

	@return $color;
}

/////////
// MIXINS
/////////

// Output color by name and type
@mixin color($name: null, $type: 'text', $breakpoint-name: '') {
	@include core.entry-output(
		color-entry($name),
		meta.get-function('color-entry-to-properties'),
		$breakpoint-name,
		$type
	);
}

// Output background color by name
@mixin color-bg($name: null, $breakpoint-name: '') {
	@include color($name, 'background', $breakpoint-name);
}

// Output border color by name
@mixin color-border($name: null, $direction: null, $breakpoint-name: '') {
	$type: 'border';

	@if utils.is-not-null($direction) {
		@include color($name, $type + '-' + $direction, $breakpoint-name);
	} @else {
		@include color($name, $type, $breakpoint-name);
	}
}

// Output border shorthand with color by name
@mixin color-border-shorthand($name: null, $shorthand: null, $direction: null, $breakpoint-name: '') {
	@include core.entry-output(
		color-entry($name),
		meta.get-function('color-entry-to-border-shorthand'),
		$breakpoint-name,
		$shorthand,
		$direction
	);
}

/////////
// OUTPUT
/////////

@mixin generate-color-module-output($breakpoint-prefix: '', $breakpoint-name: '', $apply-overwrites: false) {
	@if $generate-colors {
		$colors-new: $colors;

		// Append unset
		@if $generate-colors-unset {
			$colors-new: utils.map-append(
				$colors-new,
				unset,
				core.$unset-class
			);
		}

		// Append currentColor
		@if $generate-colors-currentcolor {
			$colors-new: utils.map-append(
				$colors-new,
				currentColor,
				$color-currentcolor-class
			);
		}

		@if not core.is-default($breakpoint-name) or not $apply-overwrites {
			@each $color-name, $color-entry in $colors-new {
				$color-value: core.get-value-by-entry($color-entry, 'color', $breakpoint-name, $apply-overwrites);
				$color-value-bg: core.get-property-by-entry($color-entry, 'color-bg', $color-value, $breakpoint-name, $apply-overwrites);
				$color-value-border: core.get-property-by-entry($color-entry, 'color-border', $color-value, $breakpoint-name, $apply-overwrites);

				$generate-text-color: utils.map-maybe-get($color-entry, 'generate-text', $generate-colors-text);
				$background-generate-color: utils.map-maybe-get($color-entry, 'generate-background', $generate-colors-background);
				$generate-border-color: utils.map-maybe-get($color-entry, 'generate-border', $generate-colors-border);
				$generate-breakpoints: utils.map-maybe-get($color-entry, 'generate-breakpoints', $generate-colors-breakpoints);

				// Text color
				@if $generate-text-color {
					@include core.generate-output-by-class(
						$class: $color-name,
						$prefix: $color-text-class-prefix,
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (color: $color-value),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);
				}

				// Background color
				@if $background-generate-color {
					@include core.generate-output-by-class(
						$class: $color-name,
						$prefix: $color-background-class-prefix,
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (background-color: $color-value-bg),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);
				}

				// Border color
				@if $generate-border-color {
					@include core.generate-output-by-class(
						$class: $color-name,
						$prefix: $color-border-class-prefix,
						$breakpoint-prefix: $breakpoint-prefix,
						$properties: (border-color: $color-value-border),
						$append-prefix: $apply-overwrites,
						$generate-breakpoints: $generate-breakpoints
					);
				}
			}
		}
	}
}
