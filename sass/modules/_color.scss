///////////////////
// DEFAULT SETTINGS
///////////////////

$rr-colors-generate-types: ('text', 'bg', 'border') !default; // text, bg, border

// Classes
$rr-color-text-class-prefix: 'color-' !default;
$rr-color-background-class-prefix: 'bg-color-' !default;
$rr-color-border-class-prefix: 'border-color-' !default;

// Colors
$rr-colors: () !default;

// Defaults
$rr-color-map-defaults: (
	'color': null,
	'types': $rr-colors-generate-types,
) !default;

$rr-colors-default: map-default($rr-colors) !default;

// Print output for this module
$rr-generate-colors: $rr-generate-classes !default;
$rr-generate-colors-hover: $rr-generate-classes !default;
$rr-generate-colors-unset: $rr-generate-colors !default;

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function color-exists($name) {
	@return entry-exists($rr-colors, $name);
}

// Gets an entry by name
@function color-entry($name: null) {
	@return get-entry-by-name($rr-colors, $name, $rr-colors-default);
}

// Get an entry property value by name
@function color-property($name, $property) {
	@return get-entry-property(
		$rr-colors,
		$name,
		$property,
		$rr-color-map-defaults,
		$rr-colors-default
	);
}

// Get value by name
@function color-value($name: null) {
	@return get-entry-value($rr-colors, $name, 'color', $rr-colors-default);
}

// Get color property name by type
@function color-property-by-type($type) {
	$property-name: color;

	@if $type == 'bg' {
		$property-name: background-color;
	} @else if $type == 'border' {
		$property-name: border-color;
	}

	@return $property-name;
}

/////////////////////
// INTERNAL FUNCTIONS
/////////////////////

// Convert entry to css properties map
@function color-to-css-properties($color, $type) {
	// Get type property
	$property-name: color-property-by-type($type);

	// Set properties
	$return: (
		'hover': $rr-generate-colors-hover,
		$property-name: color-value($color)
	);

	// Append breakpoint overwrites if exists
	$return: append-entry-breakpoint-overwrites(
		$color,
		$return,
		'color-to-css-properties',
		$type
	);

	@return $return;
}

// Prepare map for property classes
@function color-property-classes($type) {
	$property-classes: ();

	// Append defined classes
	@each $class-name, $color in $rr-colors {
		$types: color-property($class-name, 'types');

		@if in-list($types, $type) {
			$property-classes: map-append(
				$property-classes,
				color-to-css-properties($color, $type),
				$class-name
			);
		}
	}

	// Append unset class
	@if $rr-generate-colors-unset {
		@if in-list($rr-colors-generate-types, $type) {
			$property-classes: map-append(
				$property-classes,
				color-to-css-properties(unset, $type),
				$rr-global-unset-class
			);
		}
	}

	@return $property-classes;
}

/////////
// MIXINS
/////////

// Output color by name and type
@mixin color($name: null, $type: 'text') {
	$color-value: color-value($name);

	@if is-not-null($color-value) {
		#{color-property-by-type($type)}: $color-value;
	}
}

/******************/
/* OUTPUT: COLORS */
/******************/

@if $rr-generate-colors and map-not-empty($rr-colors) {
	@include mq-generate-property-classes(
		$classes: color-property-classes('text'),
		$class-prefix: $rr-color-text-class-prefix
	);

	@include mq-generate-property-classes(
		$classes: color-property-classes('bg'),
		$class-prefix: $rr-color-background-class-prefix
	);

	@include mq-generate-property-classes(
		$classes: color-property-classes('border'),
		$class-prefix: $rr-color-border-class-prefix
	);
}

