///////////////////
// DEFAULT SETTINGS
///////////////////

$rr-colors-generate-types: ('text', 'bg', 'border') !default; // text, bg, border

// Classes
$rr-color-text-class-prefix: 'color-' !default;
$rr-color-background-class-prefix: 'bg-color-' !default;
$rr-color-border-class-prefix: 'border-color-' !default;

// Colors
$rr-colors: () !default;

// Defaults
$rr-color-map-defaults: (
	'color': null,
	'types': $rr-colors-generate-types,
) !default;

$rr-colors-default: map-default($rr-colors) !default;

// Print output for this module
$rr-generate-colors: $rr-generate-classes !default;
$rr-generate-colors-text: $rr-generate-colors !default;
$rr-generate-colors-background: $rr-generate-colors !default;
$rr-generate-colors-border: $rr-generate-colors !default;
$rr-generate-colors-unset: $rr-generate-colors !default;
$rr-generate-colors-hover: $rr-generate-classes !default;

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function color-exists($name) {
	@return entry-exists($rr-colors, $name);
}

// Gets an entry by name
@function color-entry($name: null) {
	@return get-entry-by-name($rr-colors, $name, $rr-colors-default);
}

// Get an entry property value by name
@function color-property($name, $property) {
	@return get-entry-property(
		$rr-colors,
		$name,
		$property,
		$rr-color-map-defaults,
		$rr-colors-default
	);
}

// Get value by name
@function color-value($name: null) {
	@return get-entry-value($rr-colors, $name, 'color', $rr-colors-default);
}

// Get color property name by type
@function color-property-by-type($type) {
	$property-name: color;

	@if $type == 'bg' {
		$property-name: background-color;
	} @else if $type == 'border' {
		$property-name: border-color;
	}

	@return $property-name;
}

/////////
// MIXINS
/////////

// Output color by name and type
@mixin color($name: null, $type: 'text') {
	$color-value: color-value($name);

	@if is-not-null($color-value) {
		#{color-property-by-type($type)}: $color-value;
	}
}

/////////
// OUTPUT
/////////

@mixin generate-color-module-output($breakpoint-prefix: '', $breakpoint-name: '') {
	@if $rr-generate-colors {
		$rr-colors-new: $rr-colors;

		// Append unset
		@if $rr-generate-colors-unset {
			$rr-colors-new: map-append(
				$rr-colors-new,
				unset,
				$rr-global-unset-class
			);
		}

		@each $color-name, $color-entry in $rr-colors-new {
			$color-value: get-value-by-entry($color-entry, 'color');
			$generate-text-color: map-maybe-get($color-entry, 'text', $rr-generate-colors-text);
			$generate-background-color: map-maybe-get($color-entry, 'background', $rr-generate-colors-background);
			$generate-border-color: map-maybe-get($color-entry, 'border', $rr-generate-colors-border);

			// Text color
			@if $generate-text-color {
				@include generate-output-by-class(
					$class: $color-name,
					$prefix: $rr-color-text-class-prefix,
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (color: $color-value)
				);
			}

			// Background color
			@if $generate-background-color {
				@include generate-output-by-class(
					$class: $color-name,
					$prefix: $rr-color-background-class-prefix,
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (background-color: $color-value)
				);
			}

			// Border color
			@if $generate-border-color {
				@include generate-output-by-class(
					$class: $color-name,
					$prefix: $rr-color-border-class-prefix,
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (border-color: $color-value)
				);
			}
		}
	}
}
