///////////////////
// DEFAULT SETTINGS
///////////////////

// Classes
$rr-color-text-class-prefix: 'color-' !default;
$rr-color-background-class-prefix: 'bg-color-' !default;
$rr-color-border-class-prefix: 'border-color-' !default;
$rr-color-currentcolor-class: 'current' !default;

// Default entries
$rr-colors: () !default;

// Default entry
$rr-colors-default: map-default($rr-colors) !default;

// Output handling
$rr-generate-colors: $rr-generate-classes !default;
$rr-generate-colors-text: $rr-generate-colors !default;
$rr-generate-colors-background: $rr-generate-colors !default;
$rr-generate-colors-border: $rr-generate-colors !default;
$rr-generate-colors-unset: $rr-generate-colors !default;
$rr-generate-colors-currentcolor: $rr-generate-colors !default;
$rr-generate-colors-breakpoints: $rr-generate-breakpoint-classes !default;

////////////
// FUNCTIONS
////////////

// Check if an entry exists
@function color-exists($name) {
	@return entry-exists($rr-colors, $name);
}

// Gets an entry by name
@function color-entry($name: null) {
	@return get-entry-by-name($rr-colors, $name, $rr-colors-default);
}

// Get property name by type
@function color-property-by-type($type) {
	$property-name: color;

	@if $type == 'background' {
		$property-name: background-color;
	} @else if $type == 'border' {
		$property-name: border-color;
	}

	@return $property-name;
}

// Get css properties by entry
@function color-entry-to-properties($entry, $breakpoint-name: '', $type: 'text') {
	$property: color;

	@if $type == 'background' {
		$property: background-color;
	} @else if $type == 'border' {
		$property: border-color;
	} @else if $type == 'border-top' {
		$property: border-top-color;
	} @else if $type == 'border-right' {
		$property: border-right-color;
	} @else if $type == 'border-bottom' {
		$property: border-bottom-color;
	} @else if $type == 'border-left' {
		$property: border-left-color;
	}

	$color: get-value-by-entry($entry, 'color', $breakpoint-name);

	@if $type == 'background' {
		$color: get-property-by-entry($entry, 'color-bg', $color, $breakpoint-name);
	} @else if $type == 'border' {
		$color: get-property-by-entry($entry, 'color-border', $color, $breakpoint-name);
	}

	$properties: (
		$property: $color
	);

	@return $properties;
}

@function color-entry-to-border-shorthand($entry, $breakpoint-name: '', $shorthand: '', $direction: null) {
	$color: get-value-by-entry($entry, 'color', $breakpoint-name);
	$color: get-property-by-entry($entry, 'color-border', $color, $breakpoint-name);

	$property: border;

	@if $direction == 'top' {
		$property: border-top;
	} @else if $direction == 'right' {
		$property: border-right;
	} @else if $direction == 'bottom' {
		$property: border-bottom;
	} @else if $direction == 'left' {
		$property: border-left;
	}

	$properties: (
		$property: #{$shorthand} #{$color}
	);

	@return $properties;
}

// Get color by name
@function color($name, $type: 'text', $breakpoint-name: '') {
	$entry: color-entry($name);
	$color: null;

	@if($entry) {
		$color: get-value-by-entry($entry, 'color', $breakpoint-name);

		@if $type == 'background' {
			$color: get-property-by-entry($entry, 'color-bg', $color, $breakpoint-name);
		} @else if $type == 'border' {
			$color: get-property-by-entry($entry, 'color-border', $color, $breakpoint-name);
		}
	}

	@return $color;
}

/////////
// MIXINS
/////////

// Output color by name and type
@mixin color($name: null, $type: 'text', $breakpoint-name: '') {
	@include entry-output(
		color-entry($name),
		'color-entry-to-properties',
		$breakpoint-name,
		$type
	);
}

// Output background color by name
@mixin color-bg($name: null, $breakpoint-name: '') {
	@include color($name, 'background', $breakpoint-name);
}

// Output border color by name
@mixin color-border($name: null, $direction: null, $breakpoint-name: '') {
	$type: 'border';

	@if is-not-null($direction) {
		@include color($name, $type + '-' + $direction, $breakpoint-name);
	} @else {
		@include color($name, $type, $breakpoint-name);
	}
}

// Output border shorthand with color by name
@mixin color-border-shorthand($name: null, $shorthand: null, $direction: null, $breakpoint-name: '') {
	@include entry-output(
		color-entry($name),
		'color-entry-to-border-shorthand',
		$breakpoint-name,
		$shorthand,
		$direction
	);
}

/////////
// OUTPUT
/////////

@mixin generate-color-module-output($breakpoint-prefix: '', $breakpoint-name: '') {
	@if $rr-generate-colors {
		$rr-colors-new: $rr-colors;

		// Append unset
		@if $rr-generate-colors-unset {
			$rr-colors-new: map-append(
				$rr-colors-new,
				unset,
				$rr-global-unset-class
			);
		}

		// Append currentColor
		@if $rr-generate-colors-currentcolor {
			$rr-colors-new: map-append(
				$rr-colors-new,
				currentColor,
				$rr-color-currentcolor-class
			);
		}

		@each $color-name, $color-entry in $rr-colors-new {
			$color-value: get-value-by-entry($color-entry, 'color', $breakpoint-name);
			$color-value-bg: get-property-by-entry($color-entry, 'color-bg', $color-value, $breakpoint-name);
			$color-value-border: get-property-by-entry($color-entry, 'color-border', $color-value, $breakpoint-name);

			$generate-text-color: map-maybe-get($color-entry, 'generate-text', $rr-generate-colors-text);
			$generate-background-color: map-maybe-get($color-entry, 'generate-background', $rr-generate-colors-background);
			$generate-border-color: map-maybe-get($color-entry, 'generate-border', $rr-generate-colors-border);
			$generate-breakpoints: map-maybe-get($color-entry, 'generate-breakpoints', $rr-generate-colors-breakpoints);

			$breakpoint-overwrites: entry-has-breakpoint-overwrite($color-entry, $breakpoint-name);

			// Text color
			@if $generate-text-color {
				@include generate-output-by-class(
					$class: $color-name,
					$prefix: $rr-color-text-class-prefix,
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (color: $color-value),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);
			}

			// Background color
			@if $generate-background-color {
				@include generate-output-by-class(
					$class: $color-name,
					$prefix: $rr-color-background-class-prefix,
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (background-color: $color-value-bg),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);
			}

			// Border color
			@if $generate-border-color {
				@include generate-output-by-class(
					$class: $color-name,
					$prefix: $rr-color-border-class-prefix,
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: (border-color: $color-value-border),
					$breakpoint-overwrites: $breakpoint-overwrites,
					$generate-breakpoints: $breakpoint-prefix == '' or $generate-breakpoints
				);
			}
		}
	}
}
