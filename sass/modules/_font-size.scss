///////////////////
// DEFAULT SETTINGS
///////////////////

@use 'sass:meta';
@use '../utils';
@use '../core';

// Classes
$font-size-class-prefix: 'font-size-' !default;

// Default values
$font-size-default-line-height: unset !default;
$font-size-default-letter-spacing: unset !default;

// Default entries
$font-sizes: () !default;

// Default entry
$font-sizes-default: utils.map-default($font-sizes) !default;

// Output handling
$generate-font-sizes: core.$generate-classes !default;
$generate-font-sizes-unset: $generate-font-sizes !default;
$generate-font-sizes-hide: $generate-font-sizes !default;
$generate-font-sizes-breakpoints: core.$generate-breakpoint-classes !default;

///////////////////
// CLASS PROPERTIES
///////////////////

$font-size-unset-class-properties: (
	font-size: unset,
	line-height: unset,
	letter-spacing: unset
) !default;

////////////
// FUNCTIONS
////////////

// Check if a font size exists
@function font-size-exists($name) {
	@return core.entry-exists($font-sizes, $name);
}

// Gets a font size by name
@function font-size-entry($name: null) {
	@return core.get-entry-by-name($font-sizes, $name, $font-sizes-default);
}

// Get css properties by entry
@function font-size-entry-to-properties($entry, $breakpoint-name: '', $apply-overwrites: true) {
	$value: core.get-value-by-entry($entry, 'size', $breakpoint-name, $apply-overwrites);
	$properties: ();

	@if $value == core.$unset-class {
		$properties: $font-size-unset-class-properties;
	} @else {
		$properties: (
			font-size: $value,
			line-height: core.get-property-by-entry($entry, 'line-height', $font-size-default-line-height, $breakpoint-name, $apply-overwrites),
			letter-spacing: core.get-property-by-entry($entry, 'letter-spacing', $font-size-default-letter-spacing, $breakpoint-name, $apply-overwrites)
		);
	}

	@return $properties;
}

/////////
// MIXINS
/////////

// Output font size by name
@mixin font-size($name: null, $breakpoint-name: '') {
	@include core.entry-output(
		font-size-entry($name),
		meta.get-function('font-size-entry-to-properties'),
		$breakpoint-name
	);
}

/////////
// OUTPUT
/////////

@mixin font-size-generate-output($breakpoint-prefix: '', $breakpoint-name: '', $apply-overwrites: false) {
	@if $generate-font-sizes {
		$font-sizes-new: $font-sizes;

		// Append hide
		@if $generate-font-sizes-hide {
			$font-sizes-new: utils.map-append(
				$font-sizes-new,
				(
					'size': 0,
					'line-height': 0,
					'letter-spacing': 0
				),
				core.$hide-class
			);
		}

		// Append unset
		@if $generate-font-sizes-unset and $breakpoint-prefix != '' {
			$font-sizes-new: utils.map-append(
				$font-sizes-new,
				unset,
				core.$unset-class
			);
		}

		@if not core.is-default($breakpoint-name) or not $apply-overwrites {
			@each $font-size-name, $font-size-entry in $font-sizes-new {
				$generate-breakpoints: utils.map-maybe-get($font-size-entry, 'generate-breakpoints', $generate-font-sizes-breakpoints);

				@include core.generate-output-by-class(
					$class: $font-size-name,
					$prefix: $font-size-class-prefix,
					$breakpoint-prefix: $breakpoint-prefix,
					$properties: font-size-entry-to-properties($font-size-entry, $breakpoint-name, $apply-overwrites),
					$append-prefix: $apply-overwrites,
					$generate-breakpoints: $generate-breakpoints
				);
			}
		}
	}
}
