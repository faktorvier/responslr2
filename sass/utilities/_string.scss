////////////
// FUNCTIONS
////////////

@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:math';

// Check if value is string
@function is-string($value) {
	@return meta.type-of($value) == 'string';
}

// Convert value to string
@function to-string($value) {
	@return meta.inspect($value);
}

// Unquote if input is a string
@function str-unquote($string) {
	$return-string: $string;

	@if is-string($string) {
		$return-string: string.unquote($string);
	}

	@return $return-string;
}

// Replace substring in string
@function str-replace($string, $search, $replace: '') {
	$index: string.index($string, $search);

	@if $index {
		@return string.slice($string, 1, $index - 1) + $replace + str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
	}

	@return $string;
}

@function str-to-list($string, $separator: ' ', $start-at: 1) {
	$current: string.slice($string, $start-at);
	$list: ();
	$separator-index: string.index($current, $separator);

	@if $separator-index == null {
		$list: ($current);
	} @else {
		$list: (string.slice($current, 1, $separator-index - 1));
		$list: list.join($list, str-to-list($current, $separator, $start-at: $separator-index + 1));
	}

	@return $list;
}

// Url encode string
@function str-url-encode($string) {
	$map: (
		"%": "%25",
		"<": "%3C",
		">": "%3E",
		" ": "%20",
		"!": "%21",
		"*": "%2A",
		"'": "%27",
		'"': "%22",
		"(": "%28",
		")": "%29",
		";": "%3B",
		":": "%3A",
		"@": "%40",
		"&": "%26",
		"=": "%3D",
		"+": "%2B",
		"$": "%24",
		",": "%2C",
		"/": "%2F",
		"?": "%3F",
		"#": "%23",
		"[": "%5B",
		"]": "%5D"
	);

	$new: $string;

	@each $search, $replace in $map {
		$new: str-replace($new, $search, $replace);
	}

	@return $new;
}

// Encode value to JSON
@function json-encode($value) {
	$value-type: meta.type-of($value);
	$encoded: $value;

	@if $value-type == 'string' {
		$encoded: '"#{$value}"';
	} @else if $value-type == 'number' {
		@if math.is-unitless($value) == false {
			$encoded: '"#{$value}"';
		}
	} @else if $value-type == 'null' {
		$encoded: "null";
	} @else if $value-type == 'bool' {
		$encoded: $value;
	} @else if $value-type == 'color' {
		$encoded: '"#{$value}"';
	} @else if $value-type == 'list' {
		$string: "";

		@each $list-item in $value {
			$string: $string + "," + json-encode($list-item);
		}

		$encoded: "[" + string.slice($string, 2) + "]";
	} @else if $value-type == 'map' {
		$string: "";

		@each $map-key, $map-value in $value {
			$string: $string + "," + '"#{$map-key}"' + ":" + json-encode($map-value);
		}

		$encoded: "{" + string.slice($string, 2) + "}";
	}

	@return $encoded;
}
