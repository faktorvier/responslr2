////////////
// FUNCTIONS
////////////

// Check if value is string
@function is-string($value) {
	@return type-of($value) == 'string';
}

// Convert value to string
@function to-string($value) {
	@return inspect($value);
}

// Unquote if input is a string
@function str-unquote($string) {
	$return-string: $string;

	@if is-string($string) {
		$return-string: unquote($string);
	}

	@return $return-string;
}

// Replace substring in string
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

// Url encode string
@function str-url-encode($string) {
    $map: (
        "%": "%25",
        "<": "%3C",
        ">": "%3E",
        " ": "%20",
        "!": "%21",
        "*": "%2A",
        "'": "%27",
        '"': "%22",
        "(": "%28",
        ")": "%29",
        ";": "%3B",
        ":": "%3A",
        "@": "%40",
        "&": "%26",
        "=": "%3D",
        "+": "%2B",
        "$": "%24",
        ",": "%2C",
        "/": "%2F",
        "?": "%3F",
        "#": "%23",
        "[": "%5B",
        "]": "%5D"
    );

    $new: $string;

    @each $search, $replace in $map {
        $new: str-replace($new, $search, $replace);
    }

    @return $new;
}

// Encode value to JSON
@function json-encode($value) {
	$value-type: type-of($value);
	$encoded: $value;

	@if $value-type == 'string' {
		$encoded: '"#{$value}"';
	} @else if $value-type == 'number' {
		@if unitless($value) == false {
			$encoded: '"#{$value}"';
		}
	} @else if $value-type == 'null' {
		$encoded: "null";
	} @else if $value-type == 'bool' {
		$encoded: $value;
	} @else if $value-type == 'color' {
		$encoded: '"#{$value}"';
	} @else if $value-type == 'list' {
		$string: "";

		@each $list-item in $value {
			$string: $string + "," + json-encode($list-item);
		}

		$encoded: "[" + str-slice($string, 2) + "]";
	} @else if $value-type == 'map' {
		$string: "";

		@each $map-key, $map-value in $value {
			$string: $string + "," + '"#{$map-key}"' + ":" + json-encode($map-value);
		}

		$encoded: "{" + str-slice($string, 2) + "}";
	}

	@return $encoded;
}

/////////
// MIXINS
/////////
