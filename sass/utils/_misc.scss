////////////
// FUNCTIONS
////////////

// Escape selector
@use 'sass:math';
@use 'sass:list';

@use 'string';
@use 'map';
@use 'units';

@function escape-selector($selector) {
	@return $selector;

	$map: (
		// Left trailing numbers
		'.0': '.\\30',
		'.1': '.\\31',
		'.2': '.\\32',
		'.3': '.\\33',
		'.4': '.\\34',
		'.5': '.\\35',
		'.6': '.\\36',
		'.7': '.\\37',
		'.8': '.\\38',
		'.9': '.\\39',
		'#0': '#\\30',
		'#1': '#\\31',
		'#2': '#\\32',
		'#3': '#\\33',
		'#4': '#\\34',
		'#5': '#\\35',
		'#6': '#\\36',
		'#7': '#\\37',
		'#8': '#\\38',
		'#9': '#\\39',

		// Special chars
		':': '\\:',
		'/': '\\/',
		'@': '\\@',
		'=': '\\='
	);

	$selector-replaced: $selector;

	@each $search, $replace in $map {
		$selector-replaced: string.replace($selector-replaced, $search, $replace);
	}

	@return $selector-replaced;
}

// Split padding or margin shorthand
@function split-shorthand($padding-string, $part) {
	$length: list.length(utils.unquote($padding-string));
	$return-value: $padding-string;

	@if $length == 4 {
		@if $part == top {
			$return-value: list.nth($padding-string, 1);
		} @else if $part == right {
			$return-value: list.nth($padding-string, 2);
		} @else if $part == bottom {
			$return-value: list.nth($padding-string, 3);
		} @else {
			$return-value: list.nth($padding-string, 4);
		}
	} @else if $length == 3 {
		@if $part == top {
			$return-value: list.nth($padding-string, 1);
		} @else if $part == bottom {
			$return-value: list.nth($padding-string, 3);
		} @else {
			$return-value: list.nth($padding-string, 2);
		}
	} @else if $length == 2 {
		@if $part == top {
			$return-value: list.nth($padding-string, 1);
		} @else if $part == bottom {
			$return-value: list.nth($padding-string, 1);
		} @else {
			$return-value: list.nth($padding-string, 2);
		}
	}

	@return $return-value;
}

// Create a svg+xml data string for a svg
@function svg-data-string($svg) {
	@return 'data:image/svg+xml;charset=utf8,#{str-url-encode($svg)}';
}

// Throw an error if required argument is missing
@function throw-required-error($param-name, $map-name, $item-key) {
	@error 'Parameter "#{$param-name}" for the #{$map-name} "#{$item-key}" is required.';
}

// Get column width in cw
@function vw-column-nocalc($columns, $breakpoint, $nogutter: false, $negate: false) {
	$width: 0;

	@if $nogutter {
		@if $negate {
			$width: ((math.div(100vw, #{core.breakpoint-property($breakpoint, 'columns')}) * #{$columns}) - #{core.gutter($breakpoint) * math.max($columns - 1, 1)}) * -1;
		} @else {
			$width: (math.div(100vw, #{core.breakpoint-property($breakpoint, 'columns')}) * #{$columns}) - #{core.gutter($breakpoint) * math.max($columns - 1, 1)};
		}
	} @else {
		@if $negate {
			$width: ((math.div(100vw, #{core.breakpoint-property($breakpoint, 'columns')}) * #{$columns})) * -1;
		} @else {
			$width: (math.div(100vw, #{core.breakpoint-property($breakpoint, 'columns')}) * #{$columns});
		}
	}

	@return $width;
}

@function vw-column($columns, $breakpoint, $nogutter: false, $negate: false) {
	$width: calc(#{vw-column-nocalc($columns, $breakpoint, $nogutter, $negate)});

	@return $width;
}

// Get hover selector
@function hover($selector) {
	$return: '';

	@if & {
		$return: 'html.#{core.$can-hover-class} & #{$selector}:hover, #{$selector}:focus, #{$selector}:active';
	} @else {
		$return: 'html.#{core.$can-hover-class} #{$selector}:hover, #{$selector}:focus, #{$selector}:active';
	}

	@return $return;
}

/////////
// MIXINS
/////////
